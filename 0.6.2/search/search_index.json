{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Samarium","text":"<p>Samarium is a dynamic interpreted language transpiled to Python. Samarium, in its most basic form, doesn't use any digits or letters.</p> <p>Here's a <code>Hello, World!</code> program written in Samarium:</p> <pre><code>\"Hello, World!\"!;</code></pre>"},{"location":"#installation","title":"Installation","text":""},{"location":"#pip","title":"pip","text":"<pre><code>pip install samarium\n</code></pre>"},{"location":"#aur","title":"AUR","text":"<p><pre><code>git clone https://aur.archlinux.org/samarium.git &amp;&amp; cd samarium &amp;&amp; makepkg -sirc\n</code></pre> or use your favorite AUR helper.</p>"},{"location":"#using-samarium","title":"Using Samarium","text":"<p>You can run Samarium programs with <code>samarium program.sm</code>. <code>samarium-debug</code> may be used instead, which will first print out the intermediary Python code that the Samarium program is transpiled into, before executing it.</p> <p> Short Long Description <code>-c &lt;cmd&gt;</code> <code>--command &lt;cmd&gt;</code> Can be used to execute Samarium code from the string <code>cmd</code>,directly in the terminal. <code>cmd</code> can be one or more statementsseparated by semicolons as usual. Note that the last statement of <code>cmd</code> will be printed if it does not end in a semicolon. <code>-h</code> <code>--help</code> Shows the help message <code>-v</code> <code>--version</code> Prints Samarium version <p></p> <p>There is also a VSCode syntax highlighting extension for Samarium, which can be found here. Its source code can be found here.</p>"},{"location":"#credits","title":"Credits","text":"<p>Samarium was inspired by several languages, including brainfuck, Rust, and Python.</p> <p>Special thanks to:</p> <ul> <li>tetraxile for helping with design choices and   writing the docs</li> <li>MithicSpirit for making an AUR package for   Samarium</li> <li>DarviL82 for fixing some issues</li> <li>Endercheif for making the documentation look   fancy, helping with design choices, and adding partial Python Interoperability</li> </ul> <p>If you have any questions, or would like to get in touch, join my Discord server!</p>"},{"location":"arrays/","title":"Arrays","text":"<p>Arrays are defined using square brackets, with items separated by commas:</p> <pre><code>[\\, /\\, //]</code></pre> <p>Arrays can be concatenated with the <code>+</code> operator:</p> <p><code>[/, /\\] + [//]</code> is the same as <code>[/, /\\, //]</code></p> <p>To remove items from an array, the <code>-</code> operator can be used with either an index or a value. When removing by value, only the first instance of each value will be removed. Trying to remove an element not present in the array will result in an error.</p> <p><code>[\"a\", \"b\", \"c\"] - /</code> gives <code>[\"a\", \"c\"]</code> <code>[\"a\", \"b\", \"c\", \"d\"] - [\"b\", \"d\"]</code> gives <code>[\"a\", \"c\"]</code></p> <p><code>--</code> can be used instead if we want to remove elements even if they're not present in the array:</p> <p><code>[\"a\", \"b\", \"c\", \"d\"] - [\"c\", \"d\", \"e\"]</code> gives <code>[\"a\", \"b\"]</code></p> <p>Negating an array will return its copy with duplicates removed:</p> <p><code>-[/\\\\\\, //, //, //\\, /\\\\\\, //, /\\/]</code> gives <code>[/\\\\\\, //, //\\, /\\/]</code></p> <p>If we want to remove duplicates of just one value, we can use <code>---</code>:</p> <p><code>[/\\\\\\, //, //, //\\, /\\\\\\, //, /\\/] --- //</code> gives <code>[/\\\\\\, //, //\\, /\\\\\\, /\\/]</code></p> <p>Set-like union, intersection, and symmetric difference can be obtained by using <code>|</code>, <code>&amp;</code> and <code>^</code>, respectively:</p> <p><pre><code>primes: [/\\, //, /\\/, ///, /\\//, //\\/]!;\nevens: [/\\, /\\\\, //\\, /\\\\\\, /\\/\\, //\\\\]!;\n\n\"|\", primes | evens!;\n\"&amp;\", primes &amp; evens!;\n\"^\", primes ^ evens!;</code></pre> <pre><code>[2, 3, 5, 7, 11, 13]\n[2, 4, 6, 8, 10, 12]\n| [2, 3, 5, 7, 11, 13, 4, 6, 8, 10, 12]\n&amp; [2]\n^ [3, 5, 7, 11, 13, 4, 6, 8, 10, 12]\n</code></pre></p> <p>Arrays of integers can be cast to type String:</p> <p><code>[//\\/\\\\\\, //\\/\\\\/, ////\\\\/, //\\\\\\\\/]%</code> gives <code>\"hiya\"</code></p>"},{"location":"builtins/","title":"Built-in Functions","text":""},{"location":"builtins/#input","title":"INPUT","text":"<p>Standard input can be read from with <code>???</code>. It will read until it receives a newline character.</p> <p><code>x: ???;</code> will assign to <code>x</code> as a string what it reads from standard input, stopping at a newline character.</p> <p>A prompt can be given by preceding the <code>???</code> with a string, for example <code>x: \"input: \"???;</code>.</p> <p>Related library: <code>io</code></p>"},{"location":"builtins/#println","title":"PRINTLN","text":"<p>Objects can be written to standard output by adding an <code>!</code> at the end. Note that they won't be written exactly as they would appear in Samarium.</p> <p><code>\"a\"!</code> will write <code>a</code> to standard output.</p> <p><code>//\\/!</code> will write <code>13</code> to standard output.</p> <p>This function will return what it writes to stdout (though not necessarily as a string), and can thus be used in an assignment statement for example.</p> <pre><code>x: //\\!  == optional semicolon after !\n== the string \"6\" is written to stdout, and `x` now has the value 6 (number)</code></pre>"},{"location":"builtins/#throw","title":"THROW","text":"<p>Similarly to PRINTLN, some objects can be written to standard error using <code>!!!</code>. This will throw an error, and exit the program if the error is not caught. Only strings and arrays of length 2 can be used for throwing errors.</p> <pre><code>\"exception raised\"!!!  == optional semicolon after !!!\n== the following is written to stderr:\n== [Error] exception raised\n\n== 2-element arrays can be used for adding notes to exceptions:  \n[\"invalid date format\", \"use YYYY-MM-DD format\"]!!!\n== [Error] invalid date format\n== [Note] use YYYY-MM-DD format</code></pre>"},{"location":"builtins/#exit","title":"EXIT","text":"<p>The program may be exited with <code>=&gt;!</code>. If a particular exit code is desired, it may be put after the exclamation mark:</p> <p><code>=&gt;! //</code> will exit the program with exit code 3.</p> <p>A string may also be supplied instead of a number, which will first write it to stderr and then exit the program with exit code 1.</p> <p><code>=&gt;! \"uh oh\";</code> is equivalent to <code>\"uh oh\\n\" ~&gt; /\\; =&gt;! /;</code></p>"},{"location":"builtins/#hash","title":"HASH","text":"<p>The hash function <code>##</code> returns as a integer the hash value of an object if it has one (arrays and tables do not). The value it returns will remain consistent for the life of the program, but may vary if the program is run multiple times.</p> <p><code>\"hash\"##</code> will return the hash value of the string <code>\"hash\"</code>.</p>"},{"location":"builtins/#typeof","title":"TYPEOF","text":"<p>The typeof function <code>?!</code> returns the type of an object, as an instance of the <code>Type</code> class.</p> <p><code>/?!</code> returns <code>Number</code>. <code>\"abc\"?!</code> returns <code>String</code>. <code>/?!?!</code> returns <code>Type</code>.</p> <p>These instances are callable and can be used to convert values into that type, like so:</p> <pre><code>\\?!(\"123\") + /\\!;\n== writes `125` to stdout</code></pre> <p>Related library: <code>types</code></p>"},{"location":"builtins/#special","title":"SPECIAL","text":"<p>The special method <code>$</code> has different uses depending on the type of object it's used on.</p> Object Use Array Returns the length of the array Function Returns the number of parameters the function has Number Returns the integer part of the number as a string Slice Returns the length of the range covered by the slice String Returns the length of the string Table Returns an array of the table's values <p>For example:</p> <pre><code>\"string\"$!;\n== writes `6` to stdout</code></pre>"},{"location":"builtins/#timestamp","title":"TIMESTAMP","text":"<p>The timestamp function <code>@@</code> returns the time in milliseconds since the epoch.</p> <p>Note</p> <p>Timezone is included. For UTC timestamp, use <code>datetime.timestamp_utc</code>.</p> <p>Related library: <code>datetime</code></p>"},{"location":"builtins/#dtnow","title":"DTNOW","text":"<p>The dtnow function <code>@@@</code> gets the system's current date and time as an array of integers, in the format <code>[year, month, day, hour, minute, second, millisecond, utc_hour_offset, utc_minute_offset]</code>.</p> <p>Related library: <code>datetime</code></p>"},{"location":"builtins/#sleep","title":"SLEEP","text":"<p>The sleep function <code>,.,</code> pauses execution for the specified number of milliseconds.</p> <pre><code>,., /////\\/\\\\\\;\n== sleep for 1000 milliseconds (1 second) </code></pre> <p>Related library: <code>datetime</code></p>"},{"location":"builtins/#assert","title":"ASSERT","text":"<p>The assert function <code>!!</code> is used as a debugging tool. If the input to this function is falsy (i.e. empty iterable, null, or just false), an <code>AssertionError</code> will be raised, otherwise, nothing will happen. A custom error message can be provided by putting it after a <code>,</code>.</p> <pre><code>!! / &gt; /\\, \"error message\";</code></pre> <p>will raise <code>[AssertionError] error message</code>.</p>"},{"location":"builtins/#parent","title":"PARENT","text":"<p>The parent function <code>!?</code> gets the parent/inherited classes of the input class. If a class only has one parent, it will be returned directly. If a class has multiple parents, they will be returned in an array, in the same order as in the class definition.</p> <p>Note that this will only go one layer deep, i.e. if class <code>A</code> has parent <code>B</code> and class <code>B</code> has parent <code>C</code>, <code>A!?</code> will only return <code>B</code>, and <code>A!?!?</code> will return <code>C</code>.</p>"},{"location":"builtins/#random","title":"RANDOM","text":"<p>The special method <code>??</code> has different uses depending on the type of object it's used on.</p> Object Use Array Returns a random element Number Returns a random number froman interval based on its value<code>n = 0</code> \u2192 <code>0</code><code>n &gt; 0</code>\u00a0\u2192\u00a0<code>[0, n)</code><code>n &lt; 0</code> \u2192 <code>[n, 0)</code>If <code>n</code> is an integer, <code>n??</code> is also going to return integers. Slice Returns a random number in a range defined by that slice String Returns a random character Table Returns a random key <p>Related library: <code>random</code></p>"},{"location":"builtins/#id","title":"ID","text":"<p>The special method <code>**</code> returns the memory address of a given object.</p> <pre><code>x: //;\nx**!;  == 7f7ea0367800</code></pre>"},{"location":"classes/","title":"Classes","text":"<p>Classes are defined with the <code>@</code> character. Any inherited classes can follow the name of the class in parentheses, separated by commas1. Class variables and methods are defined inside curly braces.</p> <p>Inside a class' methods, the <code>'</code> character can be used to reference its instance variables and methods. Class variables are those that are shared between all instances of a class, and instance variables are for data unique to each instance.</p> <p>Class variables, instance variables and methods can be accessed with the <code>.</code> operator on an instance of the class. In this case, class methods will implicitly be given a reference to the instance as the first argument of the method; <code>x.method(arg1, arg2, ...)</code> is equivalent to <code>x?!.method(x, arg1, arg2, ...)</code>. Class variables and methods can also be accessed in the same way directly from the class itself, though note that in this case methods will not implicitly have an instance as the first argument, so it must be provided.</p> <p>Just like variables, class attributes can be made private by prefixing them with <code>#</code>, making them inaccessible outside the class.</p> <pre><code>@ Foo {\n    shared: [];\n\n    =&gt; var * {\n        'var: var;\n        '#pv: var - /;\n    }\n\n    get_pv * {\n        * '#pv;\n    }\n}\n\na: Foo(/\\\\);        == calls `Foo.create`; `a` is now an instance of `Foo`\na.var!;             == prints 5\na.get_pv()!;        == calls `Foo.get_pv(a)`; prints 4\n\nb: Foo(/\\);\na.shared+: [\"str\"]; == modifying a class variable for all instances\nb.shared!;          == prints [\"str\"]</code></pre> <p>Parent classes are inherited from right to left, i.e. the first class in the inheritance takes priority and will overwrite any functions/variables defined by the following classes:</p> <pre><code>@ A {\n    method * { \"A\"!; }\n}\n\n@ B {\n    method * { \"B\"!; }\n}\n\n@ C(A, B) {}\n\n=&gt; * {\n    c: C();\n    c.method();     == prints \"A\", as class A was inherited last\n}</code></pre> <p>There are a number of special methods that the user can implement to override certain functionality of a class, such as how it's initialized (with the <code>create</code> method), or how it interacts with different operators. These methods are as follows (where <code>func(...)</code> indicates a variable number of arguments):</p> <p> Function Python Use <code>+(other)</code> <code>add</code> Interacts with the addition operator <code>+</code>. <code>&amp;(other)</code> <code>and</code> Interacts with the bitwise AND operator <code>&amp;</code>. <code>()(...)</code> <code>call</code> Called when an instance itself is \"called\" as a function;<code>x(...)</code> roughly translates to <code>x?!.call(x, ...)</code>. <code>%()</code> -- Interacts with the cast function operator <code>%</code>. <code>=&gt;(...)</code> <code>init</code> Initializes an instance of a class, takes any numberof arguments. Typically used for setting instancevariables based on these arguments.No return value necessary. <code>--(other)</code> <code>floordiv</code> Interacts with the division operator <code>--</code>. <code>::(other)</code> <code>eq</code> Implements the equality operator <code>::</code>. <code>&lt;&lt;&gt;&gt;(index)</code> <code>getitem</code> Implements indexing an object;<code>x&lt;&lt;index&gt;&gt;</code> is equivalent to <code>x.get_item(index)</code>. <code>&gt;(other)</code> <code>gt</code> Implements the greater than operator <code>&gt;</code>. <code>&gt;:(other)</code> <code>ge</code> Implements the greater than or equal operator <code>&gt;:</code>. <code>-&gt;?(item)</code> <code>contains</code> Implements membership testing,returns <code>1</code> (object contains <code>item</code>)or <code>0</code> (object does not contain <code>item</code>).Interacts with <code>-&gt;?</code> operator. <code>##()</code> <code>hash</code> Called by the built-in hash function <code>##</code>,and for keys in a table.Objects which compare equalshould have the same hash value. <code>...()</code> <code>iter</code> Called when iterating over an object in a <code>foreach</code> loop.Returns an array of objects to iterate over. <code>&lt;(other)</code> <code>lt</code> Implements the less than operator <code>&lt;</code>. <code>&lt;:(other)</code> <code>le</code> Implements the less than or equal operator <code>&lt;:</code>. <code>---(other)</code> <code>mod</code> Interacts with the modulo operator <code>---</code>. <code>++(other)</code> <code>mul</code> Interacts with the multiplication operator <code>++</code>. <code>-_()</code> <code>neg</code> Interacts with the negative unary operator <code>-</code>. <code>~()</code> <code>invert</code> Interacts with the bitwise NOT operator <code>~</code>. <code>:::(other)</code> <code>ne</code> Implements the inequality operator <code>:::</code>. <code>|(other)</code> <code>or</code> Interacts with the bitwise OR operator <code>\\|</code>. <code>+_()</code> <code>pos</code> Interacts with the positive unary operator <code>+</code>. <code>+++(other)</code> <code>pow</code> Interacts with the exponentiation operator <code>+++</code>. <code>??()</code> -- Interacts with the random function operator <code>??</code>. <code>&lt;&lt;&gt;&gt;:(index, value)</code> <code>setitem</code> Implements assigning to an index of an object;<code>x&lt;&lt;index&gt;&gt;: value</code> is equivalentto <code>x.set_item(index, value)</code>. <code>$()</code> -- Interacts with the special function operator <code>$</code>. <code>-(other)</code> <code>sub</code> Interacts with the subtraction operator <code>-</code>. <code>?()</code> <code>bool</code> Implements boolean value testing,returns <code>1</code> (truthy) or <code>0</code> (falsy).Used for conditional statements and logical operators. <code>!()</code> <code>str</code> Returns the string representation of an object. <code>^(other)</code> <code>xor</code> Interacts with the bitwise XOR operator <code>^</code>. <p></p> <p>Two special methods \u2013 <code>=&gt;</code> and <code>!</code> \u2013 have default definitions: <pre><code>@ Foo {}\n\nf: Foo();\nf!;  == &lt;Foo@7fe5403d7b00&gt;</code></pre> The above class definition is equivalent to: <pre><code>@ Foo {\n    =&gt; * {}\n\n    ! * {\n        * \"&lt;$name@$address&gt;\" --- {{\"name\" -&gt; '?!, \"address\" -&gt; '**}};\n    }\n}</code></pre></p> <p>Some of the comparison operators can be inferred from others, so not all of them are necessary to provide implementations for. The following operators infer from each other: - <code>::</code> and <code>:::</code> - <code>&gt;</code> and <code>&lt;</code> - <code>&gt;:</code> and <code>&lt;:</code></p>"},{"location":"classes/#static-methods","title":"Static Methods","text":"<p>Methods can be made static by replacing the <code>*</code> keyword with the <code>~'*</code> keyword (where <code>~'</code> can be read as \"no instance\"): <pre><code>&lt;=calendar.date;\n\n@ Calendar {\n    is_weekend date ~'* {\n        * date.weekday &gt; /\\\\;\n    }\n}\n\nCalendar.is_weekend(date(\"2022-11-08\"))!;  == 0</code></pre></p>"},{"location":"classes/#classes-as-entry-points","title":"Classes As Entry Points","text":"<p>A class named <code>=&gt;</code> can serve as an entry point instead of a function: <pre><code>=&gt; argv * {\n    \"Hello, \" + argv&lt;&lt;/&gt;&gt;!;\n}</code></pre> <pre><code>@ =&gt; {\n    =&gt; argv * {\n        \"Hello, \" + argv&lt;&lt;/&gt;&gt;!;\n    }\n}</code></pre></p>"},{"location":"classes/#class-decorators","title":"Class Decorators","text":"<p>Decorators can also be created using classes: <pre><code>@ OutputStorage {\n\n    =&gt; func * {\n        'func: func;\n        'outputs: [];\n    }\n\n    () args... * {\n        out: 'function(**args);\n        'outputs_: [out];\n        * out;\n    }\n\n}\n\nOutputStorage @ multiply a b * {\n    * a ++ b;\n}\n\nmultiply(/\\, /\\/)!;  == 10\nmultiply(//, ///)!;  == 21\nmultiply(/\\\\/, //\\\\)!;  == 108\n\nmultiply.outputs!;  == [10, 21, 108]</code></pre></p>"},{"location":"classes/#data-classes","title":"Data Classes","text":"<p>Samarium has a shorthand syntax for defining classes whose main purpose is storing data: <pre><code>@ Person {\n    =&gt; name age * {\n        'name: name;\n        'age: age;\n    }\n\n    ! * { * \"$0($1, $2)\" --- ['?!, 'name, 'age]; }\n    :: other * { * ['name, 'age] :: [other.name, other.age]; }\n    &gt; other * { * ['name, 'age] &gt; [other.name, other.age]; }\n    &gt;: other * { * ['name, 'age] &gt;: [other.name, other.age]; }\n}</code></pre> The above definition can be replaced with just <pre><code>@! Person(name, age);</code></pre> If we wish to define additional methods, we can just open a pair of braces after we specify the name and the fields like in a regular class: <pre><code>@! Person(name, age) {\n    birthday * { 'age+:; }\n}\n\np: Person(\"Jake\", /\\\\//)!  == Person(\"Jake\", 19)\np.birthday();\np!  == Person(\"Jake\", 20)</code></pre> If you'd like your dataclass to not have any fields, you can either leave the parentheses empty or omit them entirely: <pre><code>@! Unit(); Unit()!  == Unit()\n@! Unit; Unit()!  == Unit()</code></pre></p> <p>By default, all dataclass instances have a special method defined which returns its copy: <pre><code>@! Person(name, age);\n\np: Person(\"Bob\", /\\\\//);\nq: p;\nr: p$;\nq.name: \"Alice\";\nr.name: \"Dave\";\np, q, r!  == Person(\"Alice\", 19) Person(\"Alice\", 19) Person(\"Dave\", 19)</code></pre></p> <ol> <li> <p>Note that order will be preserved here \u2014 if both class <code>A</code> and class <code>B</code> implement a function <code>f</code>, and class <code>C</code> inherits them in the order <code>(A, B)</code>, then <code>C</code> will inherit <code>f</code> from class <code>A</code>, as it is inherited later.\u00a0\u21a9</p> </li> </ol>"},{"location":"comments/","title":"Comments","text":"<p>Comments are written using <code>==</code>, and comment blocks are written with <code>==&lt;</code> and <code>&gt;==</code>:</p> <pre><code>== single-line comment\n\n==&lt; comment block\ndoesn't end\non newlines &gt;==</code></pre>"},{"location":"controlflow/","title":"Control Flow","text":""},{"location":"controlflow/#ifelse","title":"<code>if</code>/<code>else</code>","text":"<p><code>if</code> statements are written using a <code>?</code> character, and <code>else</code> is written as <code>,,</code>. Blocks are enclosed in curly brackets. <code>else if</code> can be written using <code>,, ?</code>.</p> <pre><code>? x &lt; \\ {\n    \"x is negative\"!;\n} ,, ? x &gt; \\ {\n    \"x is positive\"!;\n} ,, {\n    \"x = 0\"!;\n}</code></pre>"},{"location":"controlflow/#foreach-loop","title":"<code>foreach</code> loop","text":"<p><code>foreach</code> loops are written using <code>...</code>, and enclosed in curly brackets. They must be paired with a <code>-&gt;?</code> operator, indicating the object to iterate over.</p> <pre><code>arr: [];\n... char -&gt;? \"string\" {\n    arr+: [char];\n}\n== arr :: [\"s\", \"t\", \"r\", \"i\", \"n\", \"g\"]</code></pre>"},{"location":"controlflow/#comprehensions","title":"Comprehensions","text":""},{"location":"controlflow/#array-comprehensions","title":"Array Comprehensions","text":"<p>Array comprehensions are a way to create an array based on another iterable. Uses may include performing an operation on each item of the iterable, or creating a subsequence of those items that satisfy a certain condition.</p> <p>They are written similarly to <code>foreach</code> loops; they can come in two forms, as follows:</p> <pre><code>[expression ... member -&gt;? iterable]\n[expression ... member -&gt;? iterable ? condition]</code></pre> <p>For example, say we want to create an array of square numbers. Here are two equivalent approaches:</p> <pre><code>input: [/, /\\, //, /\\\\, /\\/];\n\n== Approach 1\narr: [];\n... n -&gt;? input {\n    arr+: [n ++ n];\n}\n\n== Approach 2\narr: [n ++ n ... n -&gt;? input];</code></pre> <p>In both cases, <code>arr</code> is equal to <code>[1, 4, 9, 16, 25]</code>.</p> <p>Now suppose we want to filter this result to only the odd-numbered items. There are again two equivalent approaches:</p> <pre><code>arr: [/, /\\\\, /\\\\/, /\\\\\\\\, //\\\\/];\n\n== Approach 1\nfiltered: [];\n... n -&gt;? arr {\n    ? n --- /\\ :: / {\n        filtered+: [n];\n    }\n}\n\n== Approach 2\nfiltered: [n ... n -&gt;? arr ? n --- /\\ :: /];</code></pre> <p>In both cases, <code>filtered</code> is equal to <code>[1, 9, 25]</code>.</p>"},{"location":"controlflow/#table-comprehensions","title":"Table Comprehensions","text":"<p>Table comprehensions have a similar syntax to array comprehensions:</p> <pre><code>{{key -&gt; value ... member -&gt;? iterable}}\n{{key -&gt; value ... member -&gt;? iterable ? condition}}</code></pre> <p>For example, both of the following approaches are equivalent:</p> <pre><code>== Approach 1\ntab: {{}};\n... x -&gt;? [/\\, /\\\\, //\\] {\n    tab&lt;&lt;x&gt;&gt;: x ++ x;\n}\n\n== Approach 2\ntab: {{x -&gt; x ++ x ... x -&gt;? [/\\, /\\\\, //\\]}};</code></pre> <p>In both cases, <code>tab</code> is equal to <code>{{2 -&gt; 4, 4 -&gt; 16, 6 -&gt; 36}}</code>.</p>"},{"location":"controlflow/#while-loop","title":"<code>while</code> loop","text":"<p><code>while</code> loops are written with <code>..</code>, and enclosed in curly brackets. The loop condition follows the <code>..</code>. An infinite loop is created when no condition is given.</p> <pre><code>x: \\;\n.. x &lt; /\\/\\ {\n    x+: /\\;\n    x!;\n}\n== prints 2, 4, 6, 8, 10</code></pre>"},{"location":"controlflow/#breakcontinue","title":"<code>break</code>/<code>continue</code>","text":"<p><code>break</code> statements are written with <code>&lt;-</code>, and terminate the enclosing loop immediately. They can be used in both <code>foreach</code> and <code>while</code> loops.</p> <pre><code>x: \\;\n.. x &lt; /\\/ {\n    x+: /;\n    ? x :: // { &lt;- }\n    x!;\n}</code></pre> <p>This program will print 1, 2, and then terminate the <code>while</code> loop on the third iteration, before printing 3.</p> <p><code>continue</code> statements are written with <code>-&gt;</code>, and immediately finish the current iteration of the enclosing loop. These can also be used in both <code>for</code> and <code>while</code> loops.</p> <pre><code>x: \\;\n.. x &lt; /\\/ {\n    x+: /;\n    ? x :: // { -&gt; }\n    x!;\n}</code></pre> <p>This program will print 1, 2, skip the third iteration of the <code>while</code> loop, then print 4, 5, and end the loop normally.</p> <p>Note</p> <p>Both <code>&lt;-</code> and <code>-&gt;</code> do not need a semicolon at the end of the statement \u2013 it's optional.</p>"},{"location":"controlflow/#trycatch","title":"<code>try</code>/<code>catch</code>","text":"<p><code>try</code>-<code>catch</code> statements are used for error handling. <code>try</code> clauses are written with <code>??</code>, and enclosed in curly brackets. If, during execution of the contents of the <code>try</code> clause, an error is thrown, the rest of the clause is skipped, the error will be silenced, and the adjoining <code>catch</code> clause will be executed. <code>catch</code> clauses are written with <code>!!</code>, and are also enclosed in curly brackets.</p> <pre><code>?? {\n    == error prone code here...\n    / -- \\;\n    \"unreachable\"!;\n} !! {\n    \"error caught\"!;\n}</code></pre>"},{"location":"enums/","title":"Enums","text":"<p>Enums are defined using the <code>#</code> character, before which comes the name of the enum.</p> <p>Each of the enum members has to be separated with a semicolon.</p> <p>By default, enum members are assigned increasing numbers, starting from 0.</p> <p>You can provide your own values for enum members by simply assigning values to the names.</p> <p>Enum members cannot be modified. Enums are truthy when they have at least 1 member.</p> <p><pre><code>Shape # {\n    Circle;\n    Square;\n}\n\nColor # {\n    Red: \"#FF0000\";\n    Green: \"#00FF00\";\n    Blue: \"#0000FF\";\n}\n\nShape!;\nShape.Circle!;\nShape.Square!;\nColor.Red!;</code></pre> <pre><code>Enum(Shape)\n0\n1\n#FF0000\n</code></pre></p> <p>Enums can be casted to Tables: <pre><code>Shape # {\n    Circle;\n    Square;\n}\n\nColor # {\n    Red: \"#FF0000\";\n    Green: \"#00FF00\";\n    Blue: \"#0000FF\";\n}\n\nShape%!;\nColor%!;</code></pre> <pre><code>{{\"Circle\" -&gt; 0, \"Square\" -&gt; 1}}\n{{\"Red\" -&gt; \"#FF0000\", \"Green\" -&gt; \"#00FF00\", \"Blue\" -&gt; \"#0000FF\"}}\n</code></pre></p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#reverse-a-files-contents","title":"Reverse a file's contents","text":"<pre><code>=&gt; argv * {\n    file: argv&lt;&lt;/&gt;&gt;;\n    data &lt;~ file;\n    -data ~&gt; file;\n}</code></pre>"},{"location":"examples/#counting-duplicates","title":"Counting duplicates","text":"<pre><code>arr: &lt;-io.inputcast(\"Enter an array of values: \");\n\"Found $0 duplicate(s) in the array\" --- [arr$ - (-arr)$]!;</code></pre>"},{"location":"examples/#checking-pythagorean-triplets","title":"Checking Pythagorean triplets","text":"<pre><code>a, b, c: &lt;-iter.sorted(&lt;-io.inputcast(\"Enter three integers: \"));\n\"These numbers do $0form a Pythagorean triplet\"\n--- [\"not \" ++ (~~(a+++ + b+++ :: c+++))]!;</code></pre>"},{"location":"examples/#generating-a-password","title":"Generating a password","text":"<pre><code>CHARSET: &lt;-string.LETTERS + &lt;-string.DIGITS;\n... c -&gt;? [CHARSET?? ... _ -&gt;? &lt;&lt;../?!(\"Password length: \"???)&gt;&gt;] { c ~&gt; /; }!;</code></pre>"},{"location":"examples/#factorial-function","title":"Factorial function","text":"<pre><code>factorial n * {\n    !! n&gt;:, \"n cannot be negative\";\n    ? ~~ n { * /; }\n    * n ++ factorial(n-);\n}\n\nn: /?!(\"n: \"???);\n\"n! =\", factorial(n)!;</code></pre>"},{"location":"examples/#memoization","title":"Memoization","text":"<pre><code>&lt;=types.Frozen;\n\nmemoize func * {\n    cache: {{}};\n    wrapper args... * {\n        args: Frozen(args);\n        ? args -&gt;? cache { * cache&lt;&lt;args&gt;&gt;; }\n        result: func(**args);\n        cache&lt;&lt;args&gt;&gt;: result;\n        * result;\n    }\n    * wrapper;\n}\n\nmemoize @ fib n * {\n    ? n &lt; /\\ { * n; }\n    * fib(n-) + fib(n - /\\);\n}\n\nfib(///\\/)!;</code></pre>"},{"location":"examples/#filtering-and-enumerating-a-file","title":"Filtering and enumerating a file","text":"<pre><code>== Reads URLs from a file, enumerates them and prints them out.\n== If a URL is 32 characters or longer, it will be printed in red.\n&lt;=string.[to_upper, strip];\n\nurls &lt;~~ \"urls.txt\";\n... lineno, line -&gt;? &lt;&lt;/..&gt;&gt; &gt;&lt; urls {\n    line: strip(line);\n    ? line$ &gt; ///// {\n        line: \"\\033[31m$0\\033[0m\" --- line;\n    }\n    \"$0. $1\" --- [lineno, line]!;\n}\n~urls;</code></pre>"},{"location":"examples/#guess-the-number-game","title":"Guess the number game","text":"<pre><code>\"Guess the number!\"!;\nsecret_number: (/\\/\\+++)??+;\n\n.. {\n    guess: \"Please input your guess: \"???;\n\n    ?? { guess: /?!(guess); }\n    !! { -&gt; }\n\n    \"You guessed:\", guess!;\n\n    ? guess &lt; secret_number { \"Too small!\"!; -&gt; }\n    ? guess &gt; secret_number { \"Too big!\"!; -&gt; }\n\n    \"You win!\"!;\n    &lt;-\n}</code></pre>"},{"location":"examples/#point-class-implementation","title":"Point class implementation","text":"<pre><code>&lt;=operator -&gt; op;\n&lt;=iter.map;\n\n@ Point {\n    =&gt; scalars... * { 'vector: scalars; }\n    ! * { * \"($0)\" --- &lt;-string.join('vector, \", \"); }\n    ... * { ... i -.? 'vector { **i; } }\n    magnitude * { * &lt;-math.sum('vector) +++ `/; }\n\n    -   other * { * Point(**map(op.sub, ' &gt;&lt; other)); }\n    +   other * { * Point(**map(op.add, ' &gt;&lt; other)); }\n    --  other * { * Point(**map(op.div, ' &gt;&lt; other)); }\n    ++  other * { * Point(**map(op.mul, ' &gt;&lt; other)); }\n    --- other * { * Point(**map(op.mod, ' &gt;&lt; other)); }\n    &gt;&lt;  other * { * 'vector &gt;&lt; other.vector; }\n    +++ other * {\n        out: [];\n        ... a -&gt;? 'vector {\n            ... b -&gt;? other.vector { out+: [[a, b]]; }\n        }\n        * -out;\n    }\n}\n\nq, p: Point(/\\, //, /\\\\), Point(//, /\\\\, /\\/);\n\np.magnitude()!;  == 3.4641016151377544\n[]?!(q)!;  == [2, 3, 4]\n\np + q!;    == (5, 7, 9)\np - q!;    == (1, 1, 1)\np ++ q!;   == (6, 12, 20)\np --- q!;  == (1, 1, 1)\np +++ q!;\n== [\n==     [3, 2], [3, 3], [3, 4],\n==     [4, 2], [4, 3], [4, 4],\n==     [5, 2], [5, 3], [5, 4]\n== ]</code></pre>"},{"location":"examples/#optional-arguments","title":"Optional arguments","text":"<pre><code>rect_area length width? * {\n    width &lt;&gt; length;\n    * width ++ length;\n}\n\nrect_area(/\\/, /\\\\\\)!;  == 40\nrect_area(/\\/)!;  == 25</code></pre>"},{"location":"fileio/","title":"File I/O","text":"<p>Files are handled through file I/O objects, which can be in one of several modes: read, write, read &amp; write, append, and as either text or binary for each of these. File I/O objects have a cursor, which is updated whenever data is written to/read from the object. File objects are truthy when they are open. The current cursor position can be gotten like so:</p> <pre><code>pos: f&lt;&lt;&gt;&gt;;\n== assuming `f` is a file I/O object</code></pre>"},{"location":"fileio/#creating","title":"Creating","text":"<p>Files can be created with the unary <code>?~&gt;</code> operator. <code>?~&gt; \"file.txt\"</code> will create an empty file called <code>file.txt</code> in the program directory.</p> <p>Note</p> <p>Files will also be created if they are opened in write or append mode.</p>"},{"location":"fileio/#reading","title":"Reading","text":"<p>Files can be opened for reading in two ways:</p> <pre><code>f &lt;~~ \"file.txt\";\n== opens `file.txt` for reading, in text mode,\n== and stores the file I/O object in `f`.\n\nf &lt;~% \"file.bin\";\n== opens `file.bin` for reading, in binary mode,\n== and stores the file I/O object in `f`.</code></pre> <p>These file I/O objects can be read into a variable (a string for text mode, and an array of integers for binary mode) for use in the program.</p> <pre><code>string &lt;~ f;\n== reads the full contents of the file I/O object `f`\n== into `string` (assuming `f` is in text read mode)\n\narray &lt;% f;\n== reads the full contents of the file I/O object `f`\n== into `array` (assuming `f` is in binary read mode)</code></pre> <p>File objects are also iterable, yielding one line per iteration: <pre><code>path: \"hello_world.rs\";\nf &lt;~~ path;\n\n\"File:\", path!;\n\"-\" ++ (//\\ + path$)!;\n... lineno, line -&gt;? &lt;&lt;/..&gt;&gt; &gt;&lt; f {\n    lineno, \"|\", &lt;-string.strip(line, \"\\n\")!;\n}\n\n~f;</code></pre> <pre><code>File: hello_world.rs\n--------------------\n1 | fn main() {\n2 |     println!(\"Hello, World!\");\n3 | }\n</code></pre></p>"},{"location":"fileio/#writing","title":"Writing","text":"<p>Files can be opened for writing in two ways:</p> <pre><code>f ~~&gt; \"file.txt\";\n== opens/creates `file.txt` for writing, in text\n== mode, and stores the file I/O object in `f`.\n\nf %~&gt; \"file.bin\";\n== opens/creates `file.bin` for writing, in binary \n== mode, and stores the file I/O object in `f`.</code></pre> <p>These file I/O objects can be written to from a variable (a string for text mode, and an array of integers for binary mode).</p> <pre><code>string ~&gt; f;\n== writes the entirety of `string` into the file I/O\n== object `f` (assuming `f` is in text write mode)\n\nstring %&gt; f;\n== writes the entire contents of `array` into the file I/O\n== object `f` (assuming `f` is in binary write mode)</code></pre>"},{"location":"fileio/#appending","title":"Appending","text":"<p>Files can be opened for appending in two ways:</p> <pre><code>f &amp;~~&gt; \"file.txt\";\n== opens/creates `file.txt` for appending, in text\n== mode, and stores the file I/O object in `f`.\n\nf &amp;%~&gt; \"file.bin\";\n== opens/creates `file.bin` for appending, in binary \n== mode, and stores the file I/O object in `f`.</code></pre> <p>The contents of these file I/O objects can be added to from a variable (a string for text mode, and an array of integers for binary mode).</p> <pre><code>string &amp;~&gt; f;\n== appends the entirety of `string` to the current contents of\n== the file I/O object `f` (assuming `f` is in text append mode)\n\narray &amp;%&gt; f;\n== appends the entirety of `array` to the current contents of\n== the file I/O object `f` (assuming `f` is in binary append mode)</code></pre>"},{"location":"fileio/#closing","title":"Closing","text":"<p>Files can be closed with the <code>~</code> operator. If files are not closed manually by the user, they will be automatically closed once the program terminates. Note that the file I/O object will not be released from memory, but it still cannot be used.</p> <pre><code>~f;\n== closes the file I/O object `f`</code></pre>"},{"location":"fileio/#quick-operations","title":"Quick Operations","text":"<p>Files can be read from, written to or appended to directly using the filename, with quick operations. These will open the file in the relevant mode, perform the operation, and close it, all in one.</p> Mode Operator Text read <code>&lt;~</code> Text write <code>~&gt;</code> Text append <code>&amp;~&gt;</code> Binary read <code>&lt;%</code> Binary write <code>%&gt;</code> Binary append <code>&amp;%&gt;</code> <p>For example:</p> <pre><code>string ~&gt; \"file.txt\";\n== writes the entirety of `string` directly into `file.txt`\n\narray &lt;% \"file.bin\";\n== reads the full contents of `file.bin` directly into `array`</code></pre>"},{"location":"fileio/#file-descriptors","title":"File Descriptors","text":"<p>You can also use file descriptors instead of file paths in order to access standard I/O streams.</p> Integer value Name <code>\\</code> Standard Input <code>/</code> Standard Output <code>/\\</code> Standard Error <p>An example use of these could be printing without a newline at the end: <pre><code>... i -&gt;? &lt;&lt;../\\/\\&gt;&gt; {\n    i ~&gt; /;\n}</code></pre> The above code is equivalent to the following Python snippets: <pre><code>def main():\n    for i in range(10):\n        print(i, end=\"\", flush=True)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>import sys\n\ndef main():\n    for i in range(10):\n        sys.stdout.write(str(i))\n        sys.stdout.flush()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> All snippets produce the following output: <pre><code>0123456789\n</code></pre></p>"},{"location":"functions/","title":"Functions","text":"<p>Functions are defined using the <code>*</code> character. Both the function's name and its parameters come before this <code>*</code> character, in that order, separated by spaces. The function body is enclosed in curly brackets. The function's return value is preceded by a <code>*</code> character as well. (Functions may also have multiple return statements, or none at all.)</p> <pre><code>add a b * {\n    sum: a + b;\n    * sum;\n}</code></pre> <p>Calling a function is done as in C-like languages, with the function name, followed by its arguments in parentheses, separated by commas.</p> <pre><code>a: /;\nb: /\\;\nc: add(a, b);</code></pre> <p>If no value is returned, the semicolon after <code>*</code> may be omitted:</p> <pre><code>exit code * {\n    ? code {*}\n    \"Success\"!;\n}</code></pre>"},{"location":"functions/#main-function","title":"Main Function","text":"<p>The main function/entrypoint of the program is denoted by <code>=&gt;</code>. This function will be implicitly called on execution of the program. The return value of the main function indicates the exit code of the program (optional, defaults to 0). This function will not be called when importing the module it's located in. Command line arguments can be gotten as an array with an optional parameter in this function.</p> <pre><code>=&gt; argv * {\n    == program here\n}</code></pre>"},{"location":"functions/#optional-parameters","title":"Optional Parameters","text":"<p>Parameters can be made optional by adding a <code>?</code> character after the parameter's name. Optional parameters are required to have a default value defined in the function's body using the <code>param &lt;&gt; default</code> syntax.</p> <pre><code>== string.leftpad\nleftpad string length char? * {\n    char &lt;&gt; \" \";\n    * pad(string, length, char) + string;\n}\n\nleftpad(\"hello\", /\\/\\)!; ==      hello\nleftpad(\"hello\", /\\/\\, \"-\")!; == -----hello</code></pre>"},{"location":"functions/#varargs","title":"Varargs","text":"<p>A function can accept a variable number of arguments by adding <code>...</code> after the last parameter's name. Packed arguments will be passed into the function as an array.</p> <pre><code>product nums... * {\n    prod: /;\n    ... n -&gt;? nums {\n        prod++: n;\n    }\n    * prod;\n}\n\nprod()!; == 1\nprod(///)!; == 7\nprod(///, /\\/\\/)!; == 147\nprod(/\\/, /\\\\\\/\\, /\\, /\\\\/\\\\\\, ///)!; == 171360</code></pre>"},{"location":"functions/#argument-unpacking","title":"Argument Unpacking","text":"<p>Arguments can be spread into a function by using the <code>**</code> unary operator:</p> <pre><code>pow a b * {\n    * a +++ b;\n}\n\narguments = [/\\, //];\n\npow(**arguments)!;\n== equivalent to pow(/\\, //)!;</code></pre>"},{"location":"functions/#decorators","title":"Decorators","text":"<p>Decorators are syntactic sugar for calling a function/class which argument is another callable.</p> <p>To use a function as a decorator, write the name, <code>@</code> and then declare the function it is decorating.</p> <pre><code>== Decorator\ndouble func * {\n    wrapper args... * {\n        * func(**args) ++ /\\;\n    }\n    * wrapper;\n}\n\n== Decorated functions\ndouble @ multiply a b * {\n    * a ++ b;\n}\n\ndouble @ code_to_char code * {\n    * code%;\n}\n\nmultiply(/\\, /\\\\)!;  == 16\ncode_to_char(/\\\\\\\\/)!;  == !!</code></pre>"},{"location":"functions/#iterators","title":"Iterators","text":"<p>Functions can yield values instead of returning them, thus making the function behave like an iterator. Values are yielded with the <code>**</code> operator:</p> <p><pre><code>&lt;=math.is_prime;\n\nprime_generator * {\n    x: /\\;\n    .. {\n        ? is_prime(x) {\n            ** x;\n        }\n        x+: /;\n    }\n}\n\npg: prime_generator();\npg!;\n\"Primes below 100:\"!;\n... i -&gt;? pg {\n    ? i &gt; /\\/\\ +++ /\\ {\n        !;\n        &lt;-\n    }\n    \"\"?!(i) + \" \" ~&gt; /;\n}</code></pre> <pre><code>&lt;Iterator@7fd890475860&gt;\nPrimes below 100:\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97\n</code></pre></p> <p>Just like with <code>*</code>, the semicolon after <code>**</code> can be omitted if no value is yielded: <pre><code>foo * {**}\n\n[]?!(foo())!  == [null]</code></pre></p> <p>Iterators support special <code>$</code> and cast <code>%</code> methods.</p> <p><code>Iterator%</code> returns the length of the iterator if available, and null otherwise.</p> <p><code>Iterator$</code> yields the next value of the iterator.</p> <p>Iterators are always truthy.</p>"},{"location":"functions/#function-composition","title":"Function Composition","text":"<p>Functions, types, and type aliases in Samarium can be composed together by using the <code>&amp;</code> operator:</p> <p><pre><code>(&lt;-math.sqrt &amp; &lt;-operator.add)(//, //\\)!  == 3\n(&lt;-types.Boolean &amp; /?!)(\"1\")!  == true</code></pre> <pre><code>&lt;=math.[abs, max, min];\narrmap: []?! &amp; &lt;-iter.map;\narrmap(abs, [/, `/, //\\, -/\\\\, -/\\/])!  == [1, 0.5, 6, 4, 5]\n\nhigh x * { * min([x, /\\/]); }\nlow x * { * max([x, \\]); }\nclamp: high &amp; low;\n\nx: []?!(&lt;&lt;-//../\\\\/&gt;&gt;)!  == [-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8]\narrmap(clamp, x)!  == [0, 0, 0, 0, 1, 2, 3, 4, 5, 5, 5, 5]</code></pre> <pre><code>compose funcs... * {\n    * &lt;-iter.reduce(&lt;-operator.and, funcs);\n}\n\nrepeat_function func times * {\n   * compose(**[func]++times);\n}\n\nfoo x * {\n    out: x +++ /?!(\"0.1\")!\n    * out;\n}\n\nrepeat_function(foo, /\\/)(`/);\n== 0.9330329915368074\n== 0.9930924954370359\n== 0.9993070929904525\n== 0.9999306876841536\n== 0.999993068552217</code></pre></p>"},{"location":"interop/","title":"Python Interoperability","text":"<p>Samarium 0.4.0 introduced partial Python Interoperability, allowing you to use Python functions inside Samarium.</p> <p>The Python file you want to use has to be in the same directory as your Samarium file (so standard importing rules apply).</p> <p>Making a Python function usable in Samarium is as easy as decorating it with <code>@export</code>\u2014it's gonna do all conversions between supported Samarium and Python types automatically.</p> <p>Python files are imported the same way as Samarium files.</p> <p>Samarium files take priority over Python files, meaning that if you have both <code>file.py</code> and <code>file.sm</code> in the same folder, Samarium will import <code>file.sm</code>.</p>"},{"location":"interop/#examples","title":"Examples","text":""},{"location":"interop/#example-1","title":"Example 1","text":"<p><pre><code># foo.py\nfrom samarium import run, Registry\nfrom samarium.python import export\n\n\n@export\ndef exec(code: str) -&gt; None:\n    run(code, Registry({}), __file__)\n</code></pre> <pre><code>&lt;-foo.exec(\"/////??!;\");  == 14</code></pre></p>"},{"location":"interop/#example-2","title":"Example 2","text":"<p><pre><code># bar.py\nimport json\n\nfrom samarium.python import export\n\n\n@export\ndef read_json(source: str) -&gt; None:\n    return json.loads(source)\n</code></pre> <pre><code>source &lt;~ \"sample.json\";\n&lt;-bar.read_json(source)!;\n== {{\"hello\" -&gt; \"world\", \"pi\" -&gt; 3.14}}</code></pre></p>"},{"location":"interop/#supported-conversions","title":"Supported Conversions","text":""},{"location":"interop/#samarium-python","title":"Samarium \u2192 Python","text":"Samarium Type Python Type Array list Enum Enum File IOBase Number float Iterator Iterator Null NoneType Slice SliceRange1 String str Table dict Zip zip"},{"location":"interop/#python-samarium","title":"Python \u2192 Samarium","text":"Python Type Samarium Type int Number bool Number float Number str String NoneType Null list Array tuple Array set Array dict Table range Slice slice Slice SliceRange1 Slice IOBase File zip Zip type[Enum] Enum Iterator Iterator <p>Additionally, Enum members only get their values converted.</p> <ol> <li> <p>Samarium Slices can act as both Python <code>range</code>s and <code>slice</code>s, therefore a <code>SliceRange</code> object is being returned. It only has 2 properties, <code>range</code> and <code>slice</code>, which return exactly those objects.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"modules/","title":"Modules","text":"<p>Modules can contain functions and variables that a user may wish to import. Modules are named after their filename (with <code>.sm</code> omitted). Like variables, module names must consist of only letters and numbers, and are case sensitive.</p>"},{"location":"modules/#importing","title":"Importing","text":"<p>Modules can be imported using the <code>&lt;-</code> operator, followed by the module's name. Objects (classes, functions, variables) from this module can then be accessed with the <code>.</code> operator. Module objects are always truthy.</p> <pre><code>&lt;=string;\n== imports the `string` module from Samarium's standard library\n\nstring.to_upper(\"abc\")!;\n== prints \"ABC\"\n\nstring.digits!;\n== prints \"0123456789\"</code></pre> <p>Objects can also be directly imported from a module one by one, in which case they don't need to be preceded by the module name when using them:</p> <pre><code>&lt;=types.UUID4;\n&lt;=math.[abs, sqrt];\n\nUUID4()!;       == a3ace080-8545-4852-a4d8-0385ccbb6a70\nsqrt(/\\\\/)!;    == 3\nabs(-/\\)!;      == 2</code></pre> <p>All objects in a module can be directly imported at once by using the wildcard character <code>*</code>. Importing everything in this way is typically advised against, as it may cause poorly readable code and/or name collisions.</p> <pre><code>&lt;=math.*;\n\nfactorial(//)!;     == prints 6</code></pre>"},{"location":"modules/#import-aliases","title":"Import Aliases","text":"<p>Imported objects can be renamed if needed by using the <code>name -&gt; new_name</code> syntax: <pre><code>&lt;=string.[to_upper -&gt; shout, strip];\n\nstr: \" hello! \";\nshout(strip(str))!;  == HELLO!</code></pre> This is different to <pre><code>&lt;=string.to_upper;\n\nshout: to_upper;\n</code></pre> because in this case, both <code>to_upper</code> and <code>shout</code> are valid options, whereas the first code block only has <code>shout</code>.</p>"},{"location":"modules/#inline-imports","title":"Inline Imports","text":"<p>Imports that are going to be only used once can be replaced by inline imports (using the <code>&lt;-</code> keyword): <pre><code>i: /?!(\"Enter a number: \"???);\n? &lt;-math.is_prime(i) {\n    i, \"is a prime number\"!;\n}</code></pre></p>"},{"location":"null/","title":"Null","text":"<p>The null value in Samarium is not represented by any symbol\u2014in fact, it's represented by the lack of it: <pre><code>x: /;\ny:;\nz: [-/, , /];</code></pre> The above code sets <code>x</code> to <code>1</code>, <code>y</code> to <code>null</code>, and <code>z</code> to <code>[-1, null, 1]</code>.</p> <p>The following code prints <code>1</code> if <code>y</code> is equal to <code>null</code> and <code>null</code> is present in <code>z</code>, and <code>0</code> otherwise. <pre><code>y :: &amp;&amp; -&gt;? z!;</code></pre> One could alias null for clarity: <pre><code>null:;\ny :: null &amp;&amp; null -&gt;? z!;</code></pre></p> <p>Converting null to a number yields the value <code>0</code>.</p>"},{"location":"numbers/","title":"Numbers","text":"<p>Note</p> <p>The following guide assumes that you are familiar with the basics of programming.</p>"},{"location":"numbers/#numbers","title":"Numbers","text":"<p>Numbers are represented in base 2, using slashes and backslashes to represent 1 and 0 respectively. <code>`</code> is used for the decimal point. Negative numbers are represented as normal, with a <code>-</code> sign before them.</p> <p>Let's see some examples of numbers:</p> Base 10 Base 2 Samarium <code>0</code> <code>0</code> <code>\\</code> <code>0.5</code> <code>0.1</code> <code>\\`/</code> <code>1</code> <code>1</code> <code>/</code> <code>2</code> <code>10</code> <code>/\\</code> <code>2.3125</code> <code>10.0101</code> <code>/\\`\\/\\/</code> <code>3</code> <code>11</code> <code>//</code> <code>5</code> <code>101</code> <code>/\\/</code> <code>8</code> <code>1000</code> <code>/\\\\\\</code> <code>13</code> <code>1101</code> <code>//\\/</code> <code>21</code> <code>10101</code> <code>/\\/\\/</code> <p>Both the integer and decimal part of a number are optional, therefore:</p> <p><code>/`</code> is equivalent to <code>/`\\</code> <code>`/</code> is equivalent to <code>\\`/</code> <code>`</code> is equivalent to <code>\\`\\</code></p> <p>Integers can be cast to characters represented by that integer's unicode code point:</p> <p><code>/\\\\\\\\/%</code> returns <code>\"!\"</code> <code>//////%</code> returns <code>\"?\"</code></p>"},{"location":"operators/","title":"Operators","text":""},{"location":"operators/#arithmetic","title":"Arithmetic","text":"Operator Meaning <code>+</code> Addition <code>-</code> Subtraction <code>++</code> Multiplication <code>--</code> Division <code>+++</code> Exponentiation <code>---</code> Modulo"},{"location":"operators/#unary","title":"Unary","text":"Operator Meaning <code>+</code> Positive <code>-</code> Negative"},{"location":"operators/#comparison","title":"Comparison","text":"Operator Meaning <code>&lt;</code> Less than <code>&gt;</code> Greater than <code>&lt;:</code> Less than or equal to <code>&gt;:</code> Greater than or equal to <code>::</code> Equal to <code>:::</code> Not equal to"},{"location":"operators/#logic-and-membership","title":"Logic and Membership","text":"Operator Meaning <code>&amp;&amp;</code> Logical AND <code>||</code> Logical OR <code>~~</code> Logical NOT <code>-&gt;?</code> <code>x -&gt;? y</code> returns 1 if <code>x</code> is a member of <code>y</code>, and 0 if not"},{"location":"operators/#bitwise","title":"Bitwise","text":"Operator Meaning <code>&amp;</code> Bitwise AND <code>|</code> Bitwise OR <code>~</code> Bitwise NOT <code>^</code> Bitwise XOR"},{"location":"operators/#assignment","title":"Assignment","text":"<p>All arithmetic and bitwise operators (except <code>~</code>) can be used together with the assignment operator.</p> <p>For example:</p> <pre><code>x: x - /\\/;\nx: x ++ //;\nx: x --- /\\\\;</code></pre> <p>is equivalent to:</p> <pre><code>x-: /\\/;\nx++: //;\nx---: /\\\\;</code></pre>"},{"location":"slices/","title":"Slices","text":"<p>Slices are used to access a range of items in an iterable (strings, arrays, tables). They're enclosed in double angle brackets. Slices have three optional parameters delimited by <code>..</code> \u2014 <code>start</code>, <code>stop</code>, and <code>step</code>.</p> <p>Slices can be either applied to indexable objects (like <code>String</code> or <code>Array</code>) or serve as stand-alone objects. Slice objects are hashable.</p> <p>Iterating over a slice object generates integers from <code>start</code> (inclusive) to <code>stop</code> (exclusive) separated by gaps of size <code>step</code>.</p> <p>If <code>start</code> is not specified, it defaults to 0. If <code>stop</code> is not specified, it defaults to 263 - 1. If <code>step</code> is not specified, it defaults to 1. </p> <pre><code>str: \"abcdefgh\";\nstr&lt;&lt;\\&gt;&gt; :: \"a\";\nstr&lt;&lt;//..//\\&gt;&gt; :: \"def\";\nstr&lt;&lt;/..//\\../\\&gt;&gt; :: \"bdf\";</code></pre> <p>All valid slice parameters are as follows:</p> Slice Returns <code>&lt;&lt;&gt;&gt;</code> the whole iterable <code>&lt;&lt;index&gt;&gt;</code> the item at position <code>index</code> <code>&lt;&lt;..stop&gt;&gt;</code> items up to index <code>stop</code> <code>&lt;&lt;....step&gt;&gt;</code> items separated by gaps of size <code>step</code> <code>&lt;&lt;start..&gt;&gt;</code> items starting from index <code>start</code> <code>&lt;&lt;..stop..step&gt;&gt;</code> items up to index <code>stop</code> separated by gaps of size <code>step</code> <code>&lt;&lt;start....step&gt;&gt;</code> items starting from index <code>start</code> separated by gaps of size <code>step</code> <code>&lt;&lt;start..stop&gt;&gt;</code> items starting from index <code>start</code> up to index <code>stop</code> <code>&lt;&lt;start..stop..step&gt;&gt;</code> items starting from index <code>start</code> up to index <code>stop</code> separated by gaps of size <code>step</code>"},{"location":"stdcollections/","title":"<code>collections</code> module","text":"<p>The <code>collections</code> module implements a few different data structure classes: Stack, Queue, Set, Deque, and ArithmeticArray.</p>"},{"location":"stdcollections/#stack","title":"Stack","text":"<p>A stack is a collection of items that the user may \"push\" a new item on top of, or \"pop\" the most recently added/top item from, following a last in first out order (LIFO).</p> <p> Method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>=&gt;([size])</code> Initializes an empty Stack object with capacity <code>size</code>.If <code>size</code> is unspecified it will default to <code>-1</code>, giving the stack unbounded capacity. <code>is_empty()</code> Returns <code>1</code> if the number of items in the stack is equal to 0, otherwise returns <code>0</code>. <code>is_full()</code> Returns <code>1</code> if the number of items in the stack is equal to the specified capacity,otherwise returns <code>0</code>.1 <code>peek()</code> Returns the value of the item on top of the stack without popping it.If the stack is empty, this will instead throw an error. <code>pop()</code> Pops/removes an item from the top of the stack, and returns it.If the stack is empty, this will instead throw an error. <code>push(item)</code> Pushes <code>item</code> on top of the stack. If the stack is full,i.e. its size is equal to the specified capacity, this will instead throw an error. <code>push_all(items)</code> Pushes each element of <code>items</code> on top of the stack, one at a time. <code>$</code> Returns the number of items in the stack. <code>?</code> Returns <code>1</code> if the stack is not empty, otherwise returns <code>0</code>.2 <code>!</code> Returns some information about the stack as a string;its capacity, number of items, and the value of the top item. <p></p>"},{"location":"stdcollections/#queue","title":"Queue","text":"<p>A queue is a collection of items that the user may \"put\" (\"enqueue\") an item at the back of, or \"get\" (\"dequeue\") an item from the front of, following a first in first out order (FIFO).</p> <p> Method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 Use <code>=&gt;([size])</code> Initializes an empty Queue object with capacity <code>size</code>.If <code>size</code> is unspecified it will default to <code>-1</code>, giving the queue unbounded capacity. <code>first()</code> Returns the value of the item at the front of the queue, without removing it.If the queue is empty, this will instead throw an error. <code>get()</code> Gets/removes an item from the front of the queue, and returns it.If the queue is empty, this will instead throw an error. <code>is_empty()</code> Returns <code>1</code> if the number of items in the queue is equal to 0, otherwise returns <code>0</code>. <code>is_full()</code> Returns <code>1</code> if the number of items in the queue is equal to the specified capacity,otherwise returns <code>0</code>.1 <code>last()</code> Returns the value of the item at the back of the queue, without removing it.If the queue is empty, this will instead throw an error. <code>put(item)</code> Puts <code>item</code> at the back of the queue. If the queue is full,i.e. its size is equal to the specified capacity, this will instead throw an error. <code>put_all(items)</code> Puts each element of <code>items</code> at the back of the queue, one at a time. <code>-&gt;?(item)</code> Returns <code>1</code> if <code>item</code> is present in the queue, <code>0</code> otherwise. <code>$</code> Returns the number of items in the queue. <code>?</code> Returns <code>1</code> if the queue is not empty, otherwise returns <code>0</code>.2 <code>!</code> Returns some information about the queue as a string;its capacity, number of items, and the values of its items.Note that if there are more than 5 items in the queue, the string will be truncated. <p></p>"},{"location":"stdcollections/#deque","title":"Deque","text":"<p>A deque is a data structure similar to a queue, but where insertion and removal of elements can be performed from both the front and the back.</p> <p> Method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>=&gt;([size])</code> Initializes an empty Deque object with capacity <code>size</code>.If <code>size</code> is unspecified it will default to <code>-1</code>, giving the deque unbounded capacity. <code>back()</code> Returns the value of the item at the back of the deque, without removing it.If the deque is empty, this will instead throw an error. <code>front()</code> Returns the value of the item at the front of the deque, without removing it.If the deque is empty, this will instead throw an error. <code>get()</code> Gets/removes an item from the back of the deque, and returns it.If the deque is empty, this will instead throw an error. <code>get_front()</code> Gets/removes an item from the front of the deque, and returns it.If the deque is empty, this will instead throw an error. <code>is_empty()</code> Returns <code>1</code> if the number of items in the deque is equal to 0, otherwise returns <code>0</code>. <code>is_full()</code> Returns <code>1</code> if the number of items in the deque is equal to the specified capacity,otherwise returns <code>0</code>.1 <code>put(item)</code> Puts <code>item</code> at the back of the deque. If the deque is full,i.e. its size is equal to the specified capacity, this will instead throw an error. <code>put_all(items)</code> Puts each element of <code>items</code> at the back of the deque, one at a time. <code>put_front(item)</code> Puts <code>item</code> at the front of the deque. If the deque is full,i.e. its size is equal to the specified capacity, this will instead throw an error. <code>put_front_all(items)</code> Puts each element of <code>items</code> at the front of the deque, one at a time. <code>$</code> Returns the number of items in the deque. <code>?</code> Returns <code>1</code> if the deque is not empty, otherwise returns <code>0</code>.2 <code>!</code> Returns some information about the deque as a string;its capacity, number of items, and the values of its items.Note that if there are more than 5 items in the deque, the string will be truncated. <p></p>"},{"location":"stdcollections/#set","title":"Set","text":"<p>A set is an unordered collection of items, with no duplicates.</p> <p> Method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>=&gt;([items][,\u00a0capacity])</code> Initializes a <code>Set</code> object, with its contents being <code>items</code> with anyduplicate elements removed, and its capacity being <code>capacity</code>.If <code>items</code> is unspecified it will default to an empty array.If <code>capacity</code> is unspecified it will default to <code>-1</code>,giving the set unbounded capacity. <code>items</code> The contents of the set as an array. <code>add(value)</code> Adds <code>value</code> to the set, provided it doesn't already exist in the set,and returns a status code (<code>0</code> or <code>1</code>) based on whether it was added.If <code>value</code> isn't already in the set, and the set is full,i.e. its size is equal to the specified capacity, this will instead throw an error. <code>clear()</code> Removes every element from the set. <code>value -&gt;?</code> Returns <code>1</code> if <code>value</code> is contained in the set, otherwise returns <code>0</code>. <code>is_empty()</code> Returns <code>1</code> if the number of items in the set is equal to 0,otherwise returns <code>0</code>. <code>is_full()</code> Returns <code>1</code> if the number of items in the setis equal to the specified capacity, otherwise returns <code>0</code>.1 <code>remove(value)</code> Removes <code>value</code> from the set, provided it exists in the set. <code>- other</code> Returns the difference of the current set and <code>other</code>. <code>&amp; other</code> Returns the intersection of the current set and <code>other</code>. <code>:: other</code> Returns <code>1</code> if the current set and <code>other</code> have the same elements, <code>0</code> otherwise. <code>::: other</code> Returns <code>1</code> if the current set and <code>other</code>don't have the same elements, <code>0</code> otherwise. <code>&lt;: other</code> Returns <code>1</code> if the current set is a subset of <code>other</code>. <code>&lt; other</code> Returns <code>1</code> if the current set is a strict subset of <code>other</code>. <code>&gt;: other</code> Returns <code>1</code> if the current set is a superset of <code>other</code>. <code>&gt; other</code> Returns <code>1</code> if the current set is a strict superset of <code>other</code>. <code>| other</code> Returns the union of the current set and <code>other</code>. <code>$</code> Returns the number of items in the set. <code>?</code> Returns <code>1</code> if the deque is not empty, otherwise returns <code>0</code>.2 <code>!</code> Returns some information about the set as a string;its capacity, number of items, and the values of its items. <p></p>"},{"location":"stdcollections/#arithmeticarray","title":"ArithmeticArray","text":"<p>An arithmetic array is an array which can be used with different binary operators.</p> <pre><code>&lt;=collections.ArithmeticArray;\n\naa: ArithmeticArray([/\\, //, /\\/]);\n\naa!;  == [2, 3, 5]\naa + /\\!;  == [4, 5, 7]\naa ++ ///!;  == [14, 21, 35]\n\nis_odd: aa --- /\\;\nis_odd!;  == [0, 1, 1]\n\naa: ArithmeticArray([\"oh\", \"hey\", \"hello\"]);\naa + \"!\"!;  == [\"oh!\", \"hey!\", \"hello!\"]</code></pre> <p>Binary operators supported by ArithmeticArray: - arithmetic: <code>+</code>, <code>++</code>, <code>+++</code>, <code>-</code>, <code>--</code>, <code>---</code> - bitwise: <code>&amp;</code>, <code>|</code>, <code>^</code> - comparison: <code>::</code>, <code>&gt;:</code>, <code>&gt;</code>, <code>&lt;:</code>, <code>&lt;</code>, <code>:::</code></p> <p>ArithmeticArray allows item assignment and inherits behavior for <code>$</code>, <code>to_bit</code>, and <code>to_string</code> from the <code>Array</code> class.</p> <p>You can also use your own custom operators in the form of functions by using the <code>apply(op, other)</code> method:</p> <pre><code>&lt;=collections.ArithmeticArray;\n\naa: ArithmeticArray([///, /\\//, //\\/]);\naa!;\naa.apply(&lt;-math.shl, /\\)!;\n\n\nremove_null nullable default * {\n    * default ? nullable :: _ ,, nullable;\n}\n\naa: ArithmeticArray([_, /\\, //, _, /\\/, _, ///]);\naa!;  == [null, 2, 3, null, 5, null, 7]\naa.apply(remove_null, \\)!;  == [0, 2, 3, 0, 5, 0, 7]</code></pre> <ol> <li> <p>Note that this will always return <code>0</code> if the specified capacity is negative, or if the user does not provide a capacity.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p><code>?</code> is functionally the opposite of <code>is_empty()</code>.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"stddatetime/","title":"<code>datetime</code> module","text":"<p>The <code>datetime</code> module consists of several functions that assist with date and time related tasks. Additionally, it includes two classes (<code>DateTime</code> and <code>DTDiff</code>).</p> <p> Variable Contents MONTHS <code>[\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]</code> WEEKDAYS <code>[\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]</code> Function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>sleep_seconds(seconds)</code> Pauses execution for <code>seconds</code> seconds. <code>sleep_minutes(minutes)</code> Pauses execution for <code>minutes</code> minutes. <code>is_leap_year(year)</code> Returns <code>1</code> if the year is a leap year, <code>0</code> otherwise. <code>days_in_month(year,\u00a0month)</code> Returns the amount of days in a given month keeping in track leapyears. <code>month_name(n)</code> Gives the name of a numbered month where <code>1</code> is <code>January</code>. <code>weekday_name(n)</code> Gives the day of a week from a numberwhere <code>1</code> is a <code>Monday</code> and <code>7</code> is <code>Sunday</code>. <code>timestamp_utc([ts])</code> Yields the <code>UTC</code> timestamp using the provided timestamp or current time. <p></p>"},{"location":"stddatetime/#datetime","title":"DateTime","text":"<p> Method\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>subtract(other)</code> Subtract two DateTime objects, returns a DTDiff object. <code>to_timestamp()</code> Returns the date &amp; time as a Unix timestamp in milliseconds. <code>!</code> Return the date and time in the format <code>Y-M-D h:m:s.z</code>. <p></p>"},{"location":"stdio/","title":"<code>io</code> module","text":"<p>The <code>io</code> module contains a few utilities for working with I/O.</p>"},{"location":"stdio/#iobytes","title":"<code>io.Bytes</code>","text":"<p>Allows for easier working with files in binary mode: <pre><code>b: &lt;-io.Bytes(\"ball\");\nb!;  == 62 61 6c 6c\nb+: \"!\";  == supports Strings, integers, Arrays of integers, and other Bytes\nb.export_string()!;  == ball!\nb.export()!;  == [98, 97, 108, 108, 33]</code></pre></p>"},{"location":"stdio/#ioinputcastprompt","title":"<code>io.inputcast([prompt])</code>","text":"<p>Works just like <code>???</code>, but tries converting the input to a specific type.</p> <p>Example (showing all available conversions): <pre><code>&lt;=io.inputcast;\n\n.. {\n    value: inputcast(\"&gt;&gt; \");\n    \"Type:\", value?!!;\n    \"Value:\", value!;\n}</code></pre> <pre><code>&gt;&gt; hello\nType: String\nValue: hello\n&gt;&gt; hello there\nType: Array\nValue: [\"hello\", \"there\"]\n&gt;&gt; 1\nType: Number\nValue: 1\n&gt;&gt; 1 2\nType: Array\nValue: [1, 2]\n&gt;&gt; 1, 2\nType: Array\nValue: [1, 2]\n&gt;&gt; \nType: Null\nValue: null\n&gt;&gt; a=1, b=2\nType: Table\nValue: {{\"a\" -&gt; 1, \"b\" -&gt; 2}}\n&gt;&gt; 3..7\nType: Slice\nValue: &lt;&lt;3..7&gt;&gt;\n</code></pre></p>"},{"location":"stdio/#ioread_untiltarget","title":"<code>io.read_until([target])</code>","text":"<p>Keeps reading lines until the <code>target</code> (<code>\"\"</code> by default) is entered. The <code>target</code> is included in the output string.</p> <p>Example: <pre><code>\"Enter your JSON:\"!;\nprogram: &lt;-io.read_until(\"}\");\nname: \"Enter file name: \"???;\nprogram ~&gt; name;\n\"Your program was saved to \" + name!;</code></pre> <pre><code>Enter your JSON:\n{\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"johndoe@example.com\",\n  \"interests\": [\n    \"reading\",\n    \"hiking\",\n    \"cooking\"\n  ]\n}\nEnter file name: ball.json\nYour program was saved to ball.json\n</code></pre></p>"},{"location":"stditer/","title":"<code>iter</code> module","text":"<p>The <code>iter</code> module contains several functions that interact with iterable objects, like strings or arrays.</p> <p> Function                        \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>accumulate(array, function)</code> Yields accumulated applications of <code>function</code>2on consecutive elements of <code>array</code>.If for example <code>function</code> returned the sum of both of its arguments,then <code>accumulate([/, /\\, //, /\\\\, /\\/], function)</code>would yield <code>1</code>, <code>3</code>, <code>6</code>, <code>10</code>, and <code>15</code>. <code>all(array)</code> Returns <code>1</code> if all elements of <code>array</code> are truthy,<code>0</code> otherwise. Returns <code>1</code> for empty arrays. <code>any(array)</code> Returns <code>1</code> if any of the elements of <code>array</code> is truthy,<code>0</code> otherwise. Returns <code>0</code> for empty arrays. <code>chunks(array, size)</code> Iterates over <code>array</code> in chunks of size <code>size</code>.When <code>array</code>'s length is not evenly divided by <code>size</code>,the last slice of <code>array</code> will be the remainder. <code>cycle(iter)</code> Copies an iterable by consuming it,and yields its elements in an infinite cycle. <code>count(array, target)</code> Returns the number of times <code>target</code> appears in <code>array</code>. <code>drop_while(array, function)</code> Evaluates <code>function</code>1 on each item of <code>array</code>,and yields elements of <code>array</code> starting from the first item(from the left) for which <code>function</code> returns a falsy value. <code>filter(function, array)</code> Evaluates <code>function</code>1 on each item of <code>array</code>,and yields those items that cause <code>function</code> to return a truthy value.<code>function</code>s taking x (\u22652) arguments requireeach element of <code>array</code> to have x elements. <code>filter_false(function,\u00a0array)</code> Evaluates <code>function</code>1 on each item of <code>array</code>,and yields those items that cause <code>function</code> to return a falsy value. <code>find(array, target)</code> Finds the first instance of <code>target</code> in <code>array</code>, and returns its index.<code>array</code> may be of type Array or String.If <code>target</code> does not appear in <code>array</code>, <code>-1</code> is returned instead. <code>find_all(array, target)</code> Finds all instances of <code>target</code> in <code>array</code>, and yields their indices. <code>flatten(array[, depth])</code> Flattens <code>array</code> <code>depth</code> times.By default, flattens recursively as deep as possible. <code>map(function, array)</code> Applies <code>function</code>1 to each item of <code>array</code>, and yields those new values.<code>function</code>s taking x (\u22652) arguments requireeach element of <code>array</code> to have x elements. <code>pairwise(array)</code> Yields successive overlapping pairs taken from <code>array</code>. <code>reduce(function, array)</code> Applies <code>function</code>2 cumulatively to consecutive items of <code>array</code>,reducing it to a single value, then returns this value.Equivalent to <code>[i ... i -&gt;? accumulate(array, function)]&lt;&lt;-/&gt;&gt;</code>. <code>reverse(array)</code> Yields the items of <code>array</code> in reverse order. <code>sorted(array[, key])</code> Returns a sorted copy of <code>array</code>.The optional parameter <code>key</code> specifies a function1 that is usedto extract a comparison key from each element in <code>array</code>.Elements are compared directly by default. <code>take_while(array, function)</code> Evaluates <code>function</code>1 on each item of <code>array</code>,and yields elements of <code>array</code> that is cut off at the first item(from the left) for which <code>function</code> returns a falsy value. <code>zip_longest(fill, arrays...)</code> Iterates over several arrays, producing a set of arrayscontaining an item from each original array.If the arrays are of uneven length,missing values are filled using the <code>fill</code> argument. <p></p> <ol> <li> <p>Note that <code>function</code> must take only one argument (excluding optional parameters).\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Note that <code>function</code> must take exactly two arguments (excluding optional parameters).\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"stdmath/","title":"<code>math</code> module","text":"<p>The <code>math</code> module provides access to a set of commonly used mathematical functions and constants.</p> <p>Constants:</p> <ul> <li><code>math.E</code> (e: 2.718281828459045...)</li> <li><code>math.PHI</code> (\u03c6: 1.618033988749894...)</li> <li><code>math.PI</code> (\u03c0: 3.141592653589793...)</li> <li><code>math.TAU</code> (\u03c4: 6.283185307179586...)</li> </ul> <p> Function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>abs(n)</code> Returns the absolute value of <code>n</code>. <code>ceil(x)</code> Returns the least integer \u2265 <code>x</code>. <code>factorial(n)</code> Returns <code>n</code> factorial. <code>floor(x)</code> Returns the greatest integer \u2264 <code>x</code>. <code>gcd(a, b)</code> Returns the greatest common divisor of <code>a</code> and <code>b</code>.If either argument is zero, the absolute value of the other argument will be returned. <code>is_int(x)</code> Returns <code>1</code> if <code>x</code> is an integer, <code>0</code> otherwise. Equivalent to <code>x :: x$</code>. <code>is_prime(n)</code> Returns <code>1</code> if <code>n</code> is prime, <code>0</code> otherwise. <code>lcm(a, b)</code> Returns the least common multiple of <code>a</code> and <code>b</code>.If any of the arguments is zero, then the returned value is <code>0</code>. <code>max(array[,\u00a0values...])</code> Returns the largest value in <code>array</code> if only one argument is passed,otherwise returns the largest value in <code>[array] + values</code>. <code>min(array[,\u00a0values...])</code> Returns the smallest value in <code>array</code> if only one argument is passed,otherwise returns the smallest value in <code>[array] + values</code>. <code>product(array)</code> Multiplies the items of <code>array</code> from left to right and returns the total.The <code>array</code>'s items must be numbers. <code>round(x[,\u00a0ndigits])</code> Returns <code>x</code> rounded to <code>ndigits</code> precision after the decimal point.Works exactly like Python's <code>round()</code>. <code>shl(a, b)</code> Returns <code>a</code> shifted to the left by <code>b</code> bits. <code>shr(a, b)</code> Returns <code>a</code> shifted to the right by <code>b</code> bits. <code>sqrt(x)</code> Returns the square root of the nonnegative number <code>n</code>. <code>sum(array[,\u00a0start])</code> Sums <code>start</code> and the items of <code>array</code> from left to right and returns the total.<code>start</code> defaults to <code>0</code>. <code>to_bin(n)</code> Returns the binary representation of <code>n</code> as a string. <code>to_oct(n)</code> Returns the octal representation of <code>n</code> as a string. <code>to_hex(n)</code> Returns the hexadecimal representation of <code>n</code> as a string. <p></p>"},{"location":"stdoperator/","title":"<code>operator</code> module","text":"<p>This module contains a set of functions corresponding to the native operators of Samarium. For instance, <code>operator.mul(a, b)</code> is equivalent to <code>a ++ b</code>. Each of the function names can be used for defining special methods in classes.</p> <p> Function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Operator\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <code>add(x, y)</code> <code>x + y</code> <code>and(x, y)</code> <code>x &amp; y</code> <code>cast(x)</code> <code>x%</code> <code>div(x, y)</code> <code>x -- y</code> <code>eq(x, y)</code> <code>x :: y</code> <code>ge(x, y)</code> <code>x &gt;: y</code> <code>gt(x, y)</code> <code>x &gt; y</code> <code>has(x, y)</code> <code>y -&gt;? x</code> <code>hash(x)</code> <code>x##</code> <code>le(x, y)</code> <code>x &lt;: y</code> <code>lt(x, y)</code> <code>x &lt; y</code> <code>mod(x, y)</code> <code>x --- y</code> <code>mul(x, y)</code> <code>x ++ y</code> <code>not(x)</code> <code>~x</code> <code>ne(x, y)</code> <code>x ::: y</code> <code>or(x, y)</code> <code>x | y</code> <code>pow(x, y)</code> <code>x +++ y</code> <code>random(x)</code> <code>x??</code> <code>special(x)</code> <code>x$</code> <code>sub(x, y)</code> <code>x - y</code> <code>to_bit(x)</code> <code>/ ? x ,, \\</code> <code>to_string(x)</code> <code>\"\"?!(x)</code> <code>xor(x, y)</code> <code>x ^ y</code> <p></p>"},{"location":"stdrandom/","title":"<code>random</code> module","text":"<p>The <code>random</code> module implements functions that make use of the random method <code>??</code>.</p> Function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>choices(iter,\u00a0k)</code> Randomly selects an item from <code>iter</code> <code>k</code> timesand returns the resulting choices as an array. <code>randint(a,\u00a0b)</code> Returns a random integer in range [a, b]. <code>sample(array,\u00a0k)</code> Randomly selects <code>k</code> unique items from <code>array</code>,and returns the resulting choices as an array.Also accepts slices. <code>shuffle(array)</code> Randomly shuffles <code>array</code> and returns the result.<code>array</code> must be of type Array."},{"location":"stdstring/","title":"<code>string</code> module","text":"<p>The <code>string</code> module contains several useful functions for string manipulation, as well as some variables containing groups of similar characters.</p> <p> Variable\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Contents\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <code>DIGITS</code> <code>\"0123456789\"</code> <code>HEXDIGITS</code> <code>\"0123456789abcdef\"</code> <code>LETTERS</code> <code>UPPERCASE + LOWERCASE</code> <code>LOWERCASE</code> <code>\"abcdefghijklmnopqrstuvwxyz\"</code> <code>OCTDIGITS</code> <code>\"01234567\"</code> <code>PRINTABLE</code> <code>LETTERS\u00a0+\u00a0DIGITS\u00a0+\u00a0PUNCTUATION\u00a0+\u00a0WHITESPACE</code> <code>PUNCTUATION</code> <code>\"!\\\"#$%&amp;'()*+,-./:;&lt;=&gt;?@[]^_`{\\|}~\"</code> <code>UPPERCASE</code> <code>\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</code> <code>WHITESPACE</code> <code>\" \\t\\n\\r\\f\\v\"</code> Function\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Use <code>capitalize(string)</code> Returns a copy of <code>string</code> with the first characterset to uppercase (assuming it's a cased character2)and all subsequent character set to lowercase. <code>center(string, length[, char])</code>1 Returns <code>string</code> centered in a new string of length <code>length</code>,padded using the specified <code>char</code>.If <code>char</code> is not specified, it defaults to <code>\" \"</code> (space).<code>string</code> is returned unchanged if <code>length</code> isless than or equal to the length of <code>string</code>. <code>ends_with(string, suffix)</code> Returns <code>1</code> if <code>string</code> ends with the substring <code>suffix</code>,otherwise returns <code>0</code>. <code>is_alphabetic(string)</code> Returns <code>1</code> if every character in <code>string</code> isan alphabetic character,i.e. is contained in the string <code>letters</code>, otherwise returns <code>0</code>. <code>is_alphanumeric(string)</code> Returns <code>1</code> if every character in <code>string</code> isan alphanumeric character,i.e. is contained in the strings <code>letters</code> or <code>numbers</code>,otherwise returns <code>0</code>. <code>is_capitalized(string)</code> Returns <code>1</code> if <code>string</code> is capitalized,i.e. matches the output of <code>capitalize(string)</code> exactly. <code>is_decimal(string)</code> Returns <code>1</code> if every character in <code>string</code> is a decimal digit,i.e. is contained in the string <code>DIGITS</code>, otherwise returns <code>0</code>. <code>is_hexadecimal(string)</code> Returns <code>1</code> if every character in <code>string</code> is a hexadecimal digit,i.e. is contained in the string <code>HEXDIGITS</code>, otherwise returns <code>0</code>. <code>is_in_group(string, group)</code> Returns <code>1</code> if every character in <code>string</code> isin the specified <code>group</code>of type Array or String, otherwise returns <code>0</code>. <code>is_lower(string)</code> Returns <code>1</code> if every cased character2 in <code>string</code> is lowercase,otherwise returns <code>0</code>. <code>is_octal(string)</code> Returns <code>1</code> if every character in <code>string</code> is an octal digit,i.e. is contained in the string <code>OCTDIGITS</code>, otherwise returns <code>0</code>. <code>is_title(string)</code> Returns <code>1</code> if <code>string</code> is in title case,i.e. matches the output of <code>title(string)</code> exactly. <code>is_upper(string)</code> Returns <code>1</code> if every cased character2 in <code>string</code> is uppercase,otherwise returns <code>0</code>. <code>is_wrapped(string, chars)</code> Returns <code>1</code> if <code>string</code> both starts and ends withthe substring <code>chars</code>, otherwise returns <code>0</code>. <code>join(iterable[, delimiter])</code> Returns a string with each consecutive memberof <code>iterable</code> converted to a stringand joined with <code>delimiter</code> between them.If <code>delimiter</code> is not specified, it defaults to <code>\" \"</code>. <code>leftpad(string, length[, char])</code> Returns a copy of <code>string</code> padded on the left so thatit's <code>length</code> characters long, using <code>char</code> for padding.If <code>char</code> is not specified, it defaults to <code>\" \"</code>.If <code>length</code> is shorter than <code>string</code>'s length,a copy of <code>string</code> is returned. <code>ordinal(n)</code> Returns an ordinal numeral of a number,e.g. <code>ordinal(/)</code> returns <code>\"1st\"</code>. <code>replace(string,\u00a0replacement[,\u00a0count])</code> Returns a copy of <code>string</code>, with all instances of each keyin the <code>replacement</code> table replaced with its corresponding value.If <code>count</code> is specified, only the first <code>count</code> instances of each keywill be replaced, starting from the left. <code>rightpad(string, length[, char])</code> Returns a copy of <code>string</code> padded on the right so thatit's <code>length</code> characters long, using <code>char</code> for padding.If <code>char</code> is not specified, it defaults to <code>\" \"</code>.If <code>length</code> is shorter than <code>string</code>'s length,a copy of <code>string</code> is returned. <code>split(string[, separator])</code> Returns an array of the words in <code>string</code>,separated by <code>separator</code>.If <code>separator</code> is not specified, it defaults to <code>\" \"</code>.If <code>separator</code> is an Array, all of its elements will be used as separators. <code>split_lines(string)</code> Returns an array of the lines in the string,breaking at line boundaries.Line breaks are not included in the resulting array. <code>starts_with(string, prefix)</code> Returns <code>1</code> if <code>string</code> starts with the substring <code>prefix</code>,otherwise returns <code>0</code>. <code>strip(string, chars)</code> Returns a copy of <code>string</code> with <code>chars</code> removed fromboth the beginning and the end,as in <code>strip_left</code> and <code>strip_right</code>. <code>strip_left(string, prefix)</code> Returns a copy of <code>string</code> with <code>prefix</code> removedfrom the beginning,multiple times if <code>string</code> still begins with <code>prefix</code>.If <code>string</code> doesn't begin with <code>prefix</code>,a copy of the original <code>string</code> is returned. <code>strip_right(string, suffix)</code> Returns a copy of <code>string</code> with <code>suffix</code> removed from the end,multiple times if <code>string</code> still ends with <code>suffix</code>.If <code>string</code> doesn't end with <code>suffix</code>,a copy of the original <code>string</code> is returned. <code>swapcase(string)</code> Returns a copy of <code>string</code> with every cased character2set to the opposite of its original case. <code>title(string)</code> Returns a copy of <code>string</code> with the first character of each word(separated by spaces) set to uppercase (assuming they'recased characters2), and all subsequent charactersof each word set to lowercase. <code>to_lower(string)</code> Returns a copy of <code>string</code> with everycased character2 set to lowercase. <code>to_upper(string)</code> Returns a copy of <code>string</code> with everycased character2 set to uppercase. <code>wrap(string, wrapper)</code> Returns a copy of <code>string</code> with<code>wrapper</code> added to the start and end. <p></p> <ol> <li> <p>An argument in <code>[square brackets]</code> means that it has a default value, and so it isn't necessary to give it a value.\u00a0\u21a9</p> </li> <li> <p>Cased characters are alphabetic characters in either uppercase or lowercase; <code>LETTERS</code> is a string of all cased characters.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"stdtypes/","title":"<code>types</code> module","text":"<p>The <code>types</code> module implements native data type aliases and data types not built-in to the language itself.</p>"},{"location":"stdtypes/#additional-types","title":"Additional types","text":""},{"location":"stdtypes/#boolean","title":"Boolean","text":"<p>The Boolean type can have value either <code>true</code> or <code>false</code>.</p> <p>Booleans can be initialized with either a string with the value <code>\"true\"</code> or <code>\"false\"</code>, or a truthy/falsy value. Booleans support several operations: all comparison operations, all arithmetic operations, all bitwise operations, and can be used with logical operators, and converted to a string (specifically either <code>\"true\"</code> or <code>\"false\"</code>).</p>"},{"location":"stdtypes/#frozen","title":"Frozen","text":"<p><code>Frozen</code> is a wrapper type designed to allow mutable types like Arrays and Tables to be used as keys in a Table. <code>Frozen</code> is immutable, meaning that once a value has been wrapped in a Frozen, it cannot be changed.</p> <pre><code>test_key key * {\n    ?? { {{key -&gt; &lt;-math.sum(key)}}!; }\n    !! { \"invalid key:\", key!; }\n}\n\ntest_key([//, /\\\\]);  == invalid key: [3, 4]\ntest_key(&lt;-types.Frozen([//, /\\\\]));  == {{Frozen([3, 4]) -&gt; 7}}</code></pre>"},{"location":"stdtypes/#uuid4","title":"UUID4","text":"<p>Generates a random UUID, version 4. Returns a UUID object with attributes <code>hex</code> and <code>dec</code>:</p> <pre><code>&lt;=types.UUID4;\n\nuuid: UUID4();\nuuid!;\n== 8b46f521-b821-4010-ae8f-9ae9522d9889\n\nuuid.hex!;\n== \"8b46f521b8214010ae8f9ae9522d9889\"\n\nuuid.dec!;\n== 185131124056068440795959350641466120329</code></pre>"},{"location":"stdtypes/#built-in-type-aliases","title":"Built-in type aliases","text":""},{"location":"stdtypes/#array","title":"Array","text":"<p>The <code>Array</code> type alias is defined to be equal to <code>[]?!</code>.</p> <p>Calling <code>Array()</code> with no arguments will return an empty array.</p> <p>A copy of an array <code>a</code> can be made by using <code>Array(a)</code>.</p> <pre><code>a: [/, /\\, //];\nb: a;\nc: Array(a);\nd: a&lt;&lt;&gt;&gt;;\n\na&lt;&lt;/\\&gt;&gt;: /\\\\;\na, b, c, d!;</code></pre> <p>Arrays can also be constructed from strings and tables:  </p> <p><code>Array(\"ball\")</code> is equivalent to <code>[\"b\", \"a\", \"l\", \"l\"]</code> <code>Array({{// -&gt; /\\\\, \"X\" -&gt; \"D\" }})</code> is equivalent to <code>[[//, /\\\\], [\"X\", \"D\"]]</code></p>"},{"location":"stdtypes/#number","title":"Number","text":"<p>The <code>Number</code> type alias is defined to be equal to <code>\\?!</code>.</p> <p>Caling <code>Number()</code> with no arguments will return the number <code>0</code>.</p> <p>Numbers can be constructed from strings, including binary, octal, and hexadecimal representations:  </p> <p><code>Number(\"1000\")</code> will return <code>1000</code> <code>Number(\"b:1000\")</code> will return <code>8</code> <code>Number(\"o:1000\")</code> will return <code>512</code> <code>Number(\"x:1000\")</code> will return <code>4096</code></p> <p>Floats can also be supplied:</p> <p><code>Number(\"3.14\")</code> will return <code>3.14</code> <code>Number(\"x:3.23d70a3d70a3e\")</code> will return <code>3.14</code> <code>Number(\"o:23.6560507534121727\")</code> will return <code>19.84</code></p> <p>Scientific notation is also supported, with <code>significand[e]exponent</code> for bases 2, 8 and 10, and <code>significand[p]exponent</code> for base 16:</p> <p><code>Number(\"b:0.11e11\")</code> will return <code>6</code> <code>Number(\"o:5e7\")</code> will return <code>10485760</code> <code>Number(\"1e-3\")</code> will return <code>0.001</code> <code>Number(\"x:0.2p7\")</code> will return <code>16</code></p>"},{"location":"stdtypes/#null","title":"Null","text":"<p>The <code>Null</code> type alias is defined to be equal to <code>(||)?!</code>. It can be used for explicit null values instead of relying on implicit null triggers.</p>"},{"location":"stdtypes/#slice","title":"Slice","text":"<p>The <code>Slice</code> type alias is defined to be equal to <code>&lt;&lt;&gt;&gt;?!</code>.</p> <p>Different slices can be constructed by using integers and nulls:  </p> <ul> <li><code>Slice(/, /\\, //)</code> is equivalent to <code>&lt;&lt;!--../\\..//--&gt;&gt;</code></li> <li><code>Slice(, , -/)</code> is equivalent to <code>&lt;&lt;....-/&gt;&gt;</code></li> <li><code>Slice(/, , ,)</code> is equivalent to <code>&lt;&lt;!--..--&gt;&gt;</code></li> <li><code>Slice(, /\\/, ,)</code> is equivalent to <code>&lt;&lt;../\\/&gt;&gt;</code></li> </ul>"},{"location":"stdtypes/#string","title":"String","text":"<p>The <code>String</code> type alias is defined to be equal to <code>\"\"?!</code>.</p> <p>Calling <code>String()</code> with no arguments will return an empty string.</p> <p>Any data type can be converted to a string.</p> <p>A copy of a string <code>s</code> can be made by using <code>String(s)</code>.</p>"},{"location":"stdtypes/#table","title":"Table","text":"<p>The <code>Table</code> type alias is defined to be equal to <code>{{}}?!</code>.</p> <p>Calling <code>Table()</code> with no arguments will return an empty table.</p> <p>Tables can be constructed from arrays containing 2-element iterables: <code>Table([[//, /\\\\/], \"XD\"])</code> is equivalent to <code>{{// -&gt; /\\\\/, \"X\" -&gt; \"D\"}}</code></p>"},{"location":"stdtypes/#zip","title":"Zip","text":"<p>The <code>Zip</code> type alias is defined to be equal to <code>(\"\" &gt;&lt; \"\")?!</code>.</p> <p>Calling <code>Zip()</code> with no arguments will return an empty iterator. Passing in only 1 argument is equivalent to <code>... i -&gt;? iter { ** [i]; }</code>. Calling <code>Zip()</code> with 2 or more arguments is equivalent to using the <code>&gt;&lt;</code> operator on them.</p>"},{"location":"strings/","title":"Strings","text":"<p>Strings are defined using double quotation marks:</p> <pre><code>str: \"Hello!\";</code></pre> <p>Multiline strings do not require any additional syntax:</p> <pre><code>\"This\nis a\nmultiline\nstring\"</code></pre>"},{"location":"strings/#basic-operations","title":"Basic Operations","text":"<p>Strings can be manipulated using some arithmetic operators:</p> <p><code>\"hello\" + \"world\"</code> is the same as <code>\"helloworld\"</code></p> <p><code>\"hello\" ++ //</code> (or <code>// ++ \"hello\"</code>) is the same as <code>\"hellohellohello\"</code> <code>\"ball\" ++ `/</code> is the same as <code>\"ba\"</code> <code>\"woah!\" ++ &lt;-math.PI</code> is the same as <code>\"woah!woah!woah!w\"</code> <code>\"hello\"++</code> is the same as <code>\"hello\" ++ /\\</code></p> <p><code>-\"hello\"</code> is the same as <code>\"olleh\"</code></p> <p><code>\"hello\" - \"l\"</code> is the same as <code>\"helo\"</code> (the 2nd operand removes the first instance of itself from the 1st operand)</p> <p><code>\"hello\" -- \"l\"</code> is the same as <code>\"heo\"</code> (the 2nd operand removes all occurences of itself from the 1st operand)</p> <p>Warning</p> <p>Multiplying strings by negative numbers is undefined, as it is unclear whether <code>s ++ -x</code> means <code>-(s ++ x)</code> or <code>(-s) ++ x</code>. These are equivalent for integers, but they produce different results for other numbers:</p> <ul> <li><code>-(\"hello\" ++ /`/)</code> is <code>\"eholleh\"</code></li> <li><code>(-\"hello\") ++ /`/</code> is <code>\"ollehol\"</code></li> </ul>"},{"location":"strings/#formatting","title":"Formatting","text":"<p>Strings can be formatted using the <code>---</code> operator. The 2nd operand can be a String, Array, or a Table. <pre><code>\"Hi $0!\" --- \"Bob\"!;\n== Hi Bob!\n\n\"$0$1$0\" --- [\"abra\", \"cad\"]!;\nabracadabra\n\ns: \"Coordinates: $lat, $long\";\ncoords: {{\n    \"lat\" -&gt; \"56.37N\",\n    \"long\" -&gt; \"-8.34W\"\n}};\ns --- coords!;\n== Coordinates: 56.37N, -8.34W</code></pre></p>"},{"location":"strings/#casting","title":"Casting","text":"<p>Strings can be cast to integers (for single characters) or Arrays of integers (for longer strings), representing the Unicode code point of each character:</p> <p><code>\"a\"%</code> returns <code>97</code> <code>\"hi!\"%</code> returns <code>[104, 105, 33]</code></p>"},{"location":"strings/#shifting","title":"Shifting","text":"<p>Strings can have their characters shifted by adding/subtracting numbers. For example, <code>\"hi\" + /</code> will result in the string <code>\"ij\"</code>, where each character in the string has been shifted one position ahead. Similarly, <code>\"hi\" - /</code> will result in the string <code>\"gh\"</code>, where each character in the string has been shifted one position backwards.</p> <p><code>\"hi\"+</code> is the same as <code>\"hi\" + /</code> <code>\"hi\"-</code> is the same as <code>\"hi\" - /</code></p>"},{"location":"tables/","title":"Tables","text":"<p>Tables map hashable values to arbitrary objects. They are defined using double curly brackets, with <code>-&gt;</code> mapping each key to each value:</p> <pre><code>tab: {{\"key\" -&gt; \"value\", / -&gt; [/\\, \"a\"]}};</code></pre> <p>A table may be indexed by its keys, which will return their corresponding values, for example, from the previous table:</p> <p><code>tab&lt;&lt;\"key\"&gt;&gt;</code> returns <code>\"value\"</code> <code>tab&lt;&lt;/&gt;&gt;</code> returns <code>[2, \"a\"]</code></p> <p>After its initialization, the items of a table can be set using this indexing syntax. If the key doesn't already exist in the table, it will be created.</p> <p><code>tab&lt;&lt;\"key\"&gt;&gt;: \"newvalue\"</code> will overwrite the previous value of <code>tab&lt;&lt;\"key\"&gt;&gt;</code>.</p> <p><code>tab&lt;&lt;\"newkey\"&gt;&gt;: //\\</code> will create a new item in the table, with key <code>\"newkey\"</code> and value <code>6</code>.</p> <p>Tables can be merged together with the addition operator <code>+</code>. The values of the table to the right of the operator take priority when both tables share keys.</p> <p>Items can be removed from a table by key using the subtraction operator <code>-</code>:</p> <p><code>{{\"a\" -&gt; /, \"b\" -&gt; /\\, // -&gt; /\\//}} - \"b\"</code> gives <code>{{\"a\" -&gt; /, // -&gt; /\\//}}</code></p> <p>Tables can be inverted using the unary <code>~</code> operator:</p> <p><code>~{{\"a\" -&gt; /, \"b\" -&gt; /\\}}</code> gives <code>{{/ -&gt; \"a\", /\\ -&gt; \"b\"}}</code></p>"},{"location":"tools/","title":"Shebang","text":"<p>You can easily use your Samarium scripts on Unix by putting an appropriate shebang line at the top of your program, for instance <pre><code>#!/usr/bin/env samarium\n\n\"Hi!\"!;</code></pre> and making it executable, e.g. with <pre><code>$ chmod +x script\n</code></pre></p>"},{"location":"tools/#samarium-repl","title":"Samarium REPL","text":"<p>If you run the <code>samarium</code> command without any arguments, you'll launch the REPL, an interactive shell that will read and evaluate any Samarium code you enter. <pre><code>$ samarium\nSamarium 0.6.2\n--&gt; \n</code></pre> Interacting with the REPL is a nice way to experiment with Samarium: <pre><code>--&gt; / + /\\\n3\n--&gt; 1: \"ball\"##!\n1083481267058749873\n--&gt; 1??\n443527852557841359\n--&gt; 1??\n894622914084910886\n</code></pre> The REPL also supports compound statements: <pre><code>--&gt; x: /\\/\\??\n--&gt; ? x --- /\\ :: \\ {\n  &gt;     x -- /\\!;\n  &gt; } ,, {\n  &gt;     3 ++ x + /!;\n  &gt; }\n4\n--&gt; x\n8\n</code></pre></p>"},{"location":"tools/#commands","title":"Commands","text":"<p>Samarium 0.6.0 introduced commands to improve your REPL experience. Commands are prefixed with a colon, use <code>:?</code> to see the list of all commands.</p>"},{"location":"tools/#clear","title":"<code>clear</code>","text":"<p>Clears the screen.</p>"},{"location":"tools/#color-colorsave","title":"<code>color [color|save]</code>","text":"<p>Changes the prompt color. The available colors are Dahlia codes from <code>0</code> to <code>e</code>, as well as their English names. Providing no argument will reset the color. <code>:color save</code> will save the current color to the REPL config, making the change permanent.</p> <p>The English names can be checked by using the <code>:? color</code> command: <pre><code>--&gt; :? color\ncolor [color]\nproviding no color will reset it to the default one\n\nuse :color save to save the current color to your config\n\n0|black\n1|blue\n2|green\n3|cyan\n4|red\n5|purple\n6|orange\n7|light gray\n8|gray\n9|light blue\na|lime\nb|aquamarine\nc|light red\nd|pink\ne|yellow\n</code></pre></p>"},{"location":"tools/#debug","title":"<code>debug</code>","text":"<p>Toggles debug mode which shows the intermediary Python code that the Samarium input is transpiled to before executing it (equivalent to using the <code>samarium-debug</code> command). <pre><code>--&gt; /\n1\n--&gt; :debug\n--&gt; /\nNum(1)\n1\n</code></pre></p>"},{"location":"tools/#exit","title":"<code>exit</code>","text":"<p>Aliases: <code>q</code>, <code>quit</code></p> <p>Exits the REPL and saves the session if autosave is enabled. Appending a <code>!</code> or just using it as a command will \"force quit\" the REPL without saving the session. <pre><code>$ ls -1 ~/.cache/samarium | wc -l\n       7\n$ samarium\nSamarium 0.6.2\n--&gt; :session autosave\nAutosave is enabled\n--&gt; :!\n$ ls -1 ~/.cache/samarium | wc -l\n       7\n</code></pre></p>"},{"location":"tools/#help-section","title":"<code>help [section]</code>","text":"<p>Aliases: <code>?</code>, <code>h</code></p> <p>Shows the help message. <pre><code>--&gt; :help\n?|h|help                shows this message\nexit|q|quit             saves the session and quits the repl\n!|exit!|q!|quit!        force quits the repl\nsession                 manages sessions, see :? session for details\nclear                   clears the screen\ncolor                   changes the prompt color, see :? color for details\ndebug                   toggles debug mode\nrestore                 restores the previous session\nt|time                  times the execution of the following statement\nundo                    undoes the last statement\n</code></pre></p>"},{"location":"tools/#time-code","title":"<code>time &lt;code&gt;</code>","text":"<p>Aliases: <code>t</code></p> <p>Runs a given piece of code and shows how much time it took to execute. <pre><code>--&gt; :t &lt;-math.is_prime(/?!(\"2137\"))\n1\n0.009 seconds\n</code></pre></p>"},{"location":"tools/#undo","title":"<code>undo</code>","text":"<p>Undoes the last statement. <pre><code>--&gt; x: /\\/\\!\n10\n--&gt; x+++:\n--&gt; x\n100\n--&gt; :undo\n--&gt; x\n10\n</code></pre> This is done by rerunning all inputs except for the last one (simple value lookups like <code>x</code> on lines 4 and 7 are excluded) and silencing all writes to stdout/stderr.</p>"},{"location":"tools/#sessions","title":"Sessions","text":"<p>Sessions provide a convenient way to save and restore your REPL state, allowing you to pick up right where you left off.</p>"},{"location":"tools/#autosave-truefalse","title":"<code>autosave [true|false]</code>","text":"<p>Specifies whether sessions should be automatically saved on exit. Providing no argument will display the current value. <pre><code>--&gt; :session autosave false\nAutosave disabled\n--&gt; :session autosave\nAutosave disabled\n</code></pre></p>"},{"location":"tools/#delete-all","title":"<code>delete-all</code>","text":"<p>Deletes all saved sessions (both named and unnamed). <pre><code>--&gt; :session delete-all\nAre you sure you want to delete all 27 sessions? (Y/n) \nRemoved 1.7KB of session files\n</code></pre></p>"},{"location":"tools/#lifetime-time","title":"<code>lifetime [time]</code>","text":"<p>Specifies the lifetime (in days) for unnamed sessions. Sessions that are too old get removed on the next launch of the REPL. Providing no argument will display the current value. <pre><code>--&gt; :session lifetime\nCurrent session lifetime is 30 days\n--&gt; :session lifetime 20\nUpdated session lifetime to 20 days\n</code></pre></p>"},{"location":"tools/#list","title":"<code>list</code>","text":"<p>Displays a list of saved sessions and their sizes. <pre><code>--&gt; :session list\n20230702193813.json                            (57.0B)\n20230702163714.json                            (57.0B)\n20230702194010.json                            (57.0B)\n20230702163535.json                            (64.0B)\n20230702193747.json                            (57.0B)\n20230702210821.json                            (51.0B)\n20230702170234.json                            (57.0B)\nprime-sieve.json                               (2.7KB)\n20230702171025.json                            (57.0B)\n20230702193958.json                            (57.0B)\n20230702171009.json                            (57.0B)\n20230702193902.json                            (57.0B)\n20230702192942.json                            (57.0B)\n----------------------------------------------\nTotal                                           3.3KB\n</code></pre></p>"},{"location":"tools/#load-name","title":"<code>load &lt;name&gt;</code>","text":"<p>Loads a given session. <pre><code>--&gt; :session load sorting\n--&gt; quick_sort([/////?? ... _ -&gt;? &lt;&lt;../\\/\\\\&gt;&gt;])\n[1, 2, 2, 3, 3, 4, 5, 11, 13, 14, 17, 18, 20, 20, 21, 21, 23, 24, 26, 29]\n</code></pre></p>"},{"location":"tools/#restore","title":"<code>restore</code>","text":"<p>Loads the most recent unnamed session. <pre><code>--&gt; :session autosave\nAutosave enabled\n--&gt; f * { (\"!\"++(///+++))! }\n--&gt; :q\n$ samarium\nSamarium 0.6.2\n--&gt; :session restore\n--&gt; f()\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n</code></pre></p>"},{"location":"tools/#save-name","title":"<code>save [name]</code>","text":"<p>Saves a sesssion under a given name. Becomes an unnamed session if no name is supplied. Session names can consist of English letters, digits, hyphens, and underscores. <pre><code>--&gt; pi * { * &lt;-math.TAU--; }\n--&gt; :session save pi\n--&gt; :q\n$ samarium\nSamarium 0.6.2\n--&gt; :session load pi\n--&gt; pi()\n3.141592653589793\n</code></pre></p>"},{"location":"variables/","title":"Variables","text":"<p>Variables are defined using the assignment operator <code>:</code>, like so: <pre><code>my_var: /;</code></pre> Variables can have many types, such as numbers, strings, arrays, tables, slices, or null. Functions and classes may also be treated as first-class variables. Only letters, numbers, and underscores can be used for variable names (case sensitive).</p> <p>Note</p> <p>Samarium follows the same naming convention as Python, i.e.: \u2014 snake_case for variables and functions \u2014 PascalCase for classes and type aliases \u2014 flatcase for modules</p> <p>Variables can be made private by prefixing the name with <code>#</code>, making them inaccessible to external modules. Private variable names don't collide with public variable names: <pre><code>var: -/;\n#var: /;\n\nvar!;  == -1\n#var!;  == 1</code></pre></p>"},{"location":"variables/#parallel-assignment","title":"Parallel assignment","text":"<p>Multiple variables can be set at once by separating them with a comma: <pre><code>a, b: /, //;\n== same as\na: /;\nb: //;\n\n\nprimes: [/\\, //, /\\/, ///, /\\//];\n\nfirst, **rest, last: primes;\n    == ^ collect as many values as possible\n== same as\nfirst: primes&lt;&lt;\\&gt;&gt;;\nrest: primes&lt;&lt;/..-/&gt;&gt;;\nlast: primes&lt;&lt;-/&gt;&gt;;</code></pre></p>"},{"location":"zip/","title":"Zipping","text":"<p>Samarium's zip operator <code>&gt;&lt;</code> allow for easy zipping, that is, iterating through multiple iterables at once: <pre><code>names: [\"Alice\", \"Bob\", \"Charlie\"];\nages: [/\\\\\\\\, /\\\\\\/, ////];\n\n... i -&gt;? names &gt;&lt; ages {\n    \"$0 is $1 years old\" --- i!;\n}</code></pre> <pre><code>Alice is 16 years old\nBob is 17 years old\nCharlie is 15 years old\n</code></pre></p> <p>Enumerating iterables can be simulated by using an empty slice object: <pre><code>x: [\"Alpha\", \"Beta\", \"Gamma\"];\n\n... i, v -&gt;? &lt;&lt;&gt;&gt; &gt;&lt; x {\n    \"x&lt;&lt;$0&gt;&gt; :: $1\" --- [i, v]!;\n}</code></pre> <pre><code>x&lt;&lt;0&gt;&gt; :: Alpha\nx&lt;&lt;1&gt;&gt; :: Beta\nx&lt;&lt;2&gt;&gt; :: Gamma\n</code></pre> </p> <p><pre><code>&lt;=string.ordinal;\n\nwinners: [\"Jake\", \"Clarisse\", \"Matt\"];\n\n... p, w -&gt;? &lt;&lt;/..&gt;&gt; &gt;&lt; winners {\n    \"$0 place: $1\" --- [ordinal(p), w];\n}</code></pre> <pre><code>1st place: Jake\n2nd place: Clarisse\n3rd place: Matt\n</code></pre></p>"}]}