abs n * {
    ? n < \ { * -n; }
    * n;
}

factorial n * {
    ? n < \ {
        "factorial is defined only for non-negative numbers"!!!;
    }
    o: /;
    .. n > \ {
        o++: n;
        n-: /;
    }
    * o;
}

gcd a b * {
    .. b { a, b: b, a --- b; }
    * abs(a);
}

lcm a b * {
    ?? { * abs(a ++ b) -- gcd(a, b); }
    !! { * \; }
}

product array * {
    o: /;
    ... e ->? array { o++: e; }
    * o;
}

sum array start? * {
    start <> \;
    o: start;
    ... e ->? array { o+: e; }
    * o;
}

max array * {
    o: array<<\>>;
    ... e ->? array {
        ? e > o { o: e; }
    }
    * o;
}

min array * {
    o: array<<\>>;
    ... e ->? array {
        ? e < o { o: e; }
    }
    * o;
}

sqrt n * {
    ? n < \ {
        "sqrt is defined only for non-negative numbers"!!!;
    }
    root: \;
    rmdr: \;
    s: n$$ - (/ ? n$$ --- /\ ,, /\);
    .. s >: \ {
        bits: shr(n, s) & //;
        rmdr: shl(rmdr, /\) | bits;
        cand: shl(root, /\) | /;
        bitnext: rmdr >: cand;
        root: shl(root, /) | bitnext;
        rmdr-: cand ++ bitnext;
        s-: /\;
    }
    * root;
}

shl a b * {
    * a ++ /\ +++ b;
}

shr a b * {
    * a -- /\ +++ b;
}

to_hex n * {
    <=string.HEXDIGITS;
    div: n -- /\\\\;
    mod: n --- /\\\\;
    ? ~~ div { * HEXDIGITS<<mod>>; }
    * to_hex(div) + HEXDIGITS<<mod>>;
}

to_oct n * {
    <=string.OCTDIGITS;
    div: n -- /\\\;
    mod: n --- /\\\;
    ? ~~ div { * OCTDIGITS<<mod>>; }
    * to_oct(div) + OCTDIGITS<<mod>>;
}

is_prime n * {
    0: \;
    2: /\;
    3: //;
    6: 2 ++ 3;
    ? n <: 3 {
        * n > /;
    }
    ? n --- 2 :: 0 || n --- 3 :: 0 {
        * 0;
    }
    i: /\/;
    .. i +++ 2 <: n {
        ? n --- i :: 0 || n --- (i + 2) :: 0 {
            * 0;
        }
        i+: 6;
    }
    * /;
}