UPPERCASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
LOWERCASE: "abcdefghijklmnopqrstuvwxyz";
LETTERS: UPPERCASE + LOWERCASE;

OCTDIGITS: "01234567";
DIGITS: OCTDIGITS + "89";
HEXDIGITS: DIGITS + "abcdef";

PUNCTUATION: "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
WHITESPACE: " \t\n\r\f\v";

PRINTABLE: LETTERS + DIGITS + PUNCTUATION + WHITESPACE;

capitalize string * {
    ? ~~ string { * string; }
    * to_upper(string<<\>>) + to_lower(string<</..>>);
}

center string length char? * {
    char <> " ";
    ? char$ > / {
        "char has to be of length 1"!!!;
    }
    index: \;
    .. string$ < length {
        ? index {
            string: char + string;
        } ,, {
            string+: char;
        }
        index+:;
        index---:;
    }
    * string;
}

ends_with string suffix * {
    ? suffix$ > string$ { * \; }
    ? suffix :: string { * /; }
    * string<<-suffix$..>> :: suffix;
}

is_alphabetic string * {
    * is_in_group(string, LETTERS);
}

is_alphanumeric string * {
    * is_in_group(string, LETTERS + DIGITS);
}

is_capitalized string * {
    * string :: capitalize(string);
}

is_decimal string * {
    * is_in_group(string, DIGITS);
}

is_hexadecimal string * {
    * is_in_group(string, HEXDIGITS);
}

is_in_group string group * {
    ... char ->? string {
        ? char ~~ ->? group { * \; }
    }
    * /;
}

is_lower string * {
    * string :: to_lower(string);
}

is_octal string * {
    * is_in_group(string, OCTDIGITS);
}

is_title string * {
    * string :: title(string);
}

is_upper string * {
    * string :: to_upper(string);
}

is_wrapped string chars * {
    * starts_with(string, chars) && ends_with(string, chars);
}

join iterable delimiter? * {
    delimiter <> "";
    o: "";
    ... e ->? iterable {
        o+: ""?!(e);
        o+: delimiter;
    }
    ? delimiter {
        o: o<<..-delimiter$>>;
    }
    * o;
}

leftpad string length char? * {
    char <> " ";
    * pad(string, length, char) + string;
}

ordinal n * {
    10: /\/\;
    ords: {{/ -> "st", /\ -> "nd", // -> "rd"}};
    ? n --- (10 ++ 10) ~~ ->? <</\\../\/\/>> && n --- 10 ->? ords {
        * "$0$1" --- [n, ords<<n --- 10>>];
    }
    * "$0th" --- [n];
}

pad string length char? * {
    char <> " ";
    ? char$ > / {
        "char has to be of length 1"!!!;
    }
    ? length < string$ { * string; }
    * char ++ (length - string$);
}

replace string replacements count? * {
    count <> -/;

    replace string from to count * {
        empty * {
            ? ~~ from { * to; }
            * string;
        }

        interleave count * {
            out: to;
            count-:;
            ... i ->? string {
                out+: i;
                ? count {
                    out+: to;
                    count-:;
                }
            }
            * out;
        }

        del_char count * {
            out: "";
            ... i ->? string {
                ? count && i :: from {
                    count-:;
                } ,, {
                    out+: i;
                }
            }
            * out;
        }

        replace_substring count * {
            string_copy: string;
            out: "";
            find: <-iter.find;
            .. count && from ->? string_copy {
                i: find(string_copy, from);
                out+: string_copy<<..i>>;
                out+: to;
                string_copy: string_copy<<i + from$..>>;
                count-:;
            }
            * out + string_copy;
        }

        replace_char count * {
            out: "";
            ... i ->? string {
                ? i :: from && count {
                    out+: to;
                    count-:;
                } ,, {
                    out+: i;
                }
            }
            * out;
        }

        ? ~~ string {
            * empty();
        } ,, ? ~~ from {
            * interleave(count);
        } ,, ? from$ :: / {
            ? ~~ to {
                * del_char(count);
            }
            * replace_char(count);
        } ,, {
            * replace_substring(count);
        }
    }

    ? replacements?! ::: <-types.Table {
        "invalid type for replacements: " + ""?!(replacements?!)!!!;
    }
    replacements: {{k -> v ... k, v ->? replacements >< replacements$}};
    ? ~~ <-iter.all([count, replacements]) {
        * string;
    }
    ... f, t ->? replacements >< replacements$ {
        string: replace(string, f, t, count);
    }
    * string;
}

rightpad string length char? * {
    char <> " ";
    * string + pad(string, length, char);
}

split string separator? * {
    separator <> " ";
    ? ~~ separator { "empty separator"!!!; }
    ? separator?! :: []?! {
        first: separator<<\>>;
        rest: separator<</..>>;
        string: replace(string, {{i -> first ... i ->? rest}});
        separator: first;
    }
    ? separator ~~ ->? string { * [string]; }
    ? separator$ :: / {
        * #split_char(string, separator);
    }
    out: [];
    <=iter.find;
    .. {
        idx: find(string, separator);
        ? idx :: -/ { <- }
        out+: [string<<..idx>>];
        string: string<<idx+separator$..>>;
    }
    * out + [string];
}

#split_char string separator * {
    out: [];
    temp: "";
    ... char ->? string {
        ? char :: separator {
            out+: [temp];
            temp: "";
        } ,, {
            temp+: char;
        }
    }
    * out + [temp];
}

split_lines string * {
    * split(
        replace(string, {{"\r\n" -> "\n"}}),
        []?!("\r\n\v\f\x1c\x1d\x1e\x85\u2028\u2029")
    );
}

starts_with string prefix * {
    ? prefix$ > string$ { * \; }
    ? prefix :: string { * /; }
    * string<<..prefix$>> :: prefix;
}

strip string chars? * {
    chars <> " ";
    * strip_left(strip_right(string, chars), chars);
}

strip_left string prefix * {
    .. starts_with(string, prefix) {
        string: string<<prefix$..>>;
    }
    * string;
}

strip_right string suffix * {
    .. ends_with(string, suffix) {
        string: string<<..-suffix$>>;
    }
    * string;
}

swapcase string * {
    out: "";
    ... char ->? string {
        ? is_upper(char) {
            out+: to_lower(char);
        } ,, {
            out+: to_upper(char);
        }
    }
    * out;
}

title string * {
    * join([capitalize(w) ... w ->? split(string)], " ");
}

to_lower string * {
    ? string?! ::: <-types.String {
        "invalid type: " + ""?!(string?!)!!!;
    }
    out: "";
    ... char ->? string {
        ? char% ->? <</\\\\\/../\//\/\>> {
            out+: (char% + /\\\\\)%;
        } ,, {
            out+: char;
        }
    }
    * out;
}

to_upper string * {
    ? string?! ::: <-types.String {
        "invalid type: " + ""?!(string?!)!!!;
    }
    out: "";
    ... char ->? string {
        ? char% ->? <<//\\\\/..////\/\>> {
            out+: (char% - /\\\\\)%;
        } ,, {
            out+: char;
        }
    }
    * out;
}

wrap string wrapper * {
    * wrapper + string + wrapper;
}