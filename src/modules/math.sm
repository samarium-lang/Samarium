abs n * {
    ? n < \ { * -n; }
    * n;
}

factorial n * {
    ? n < \ {
        "factorial is defined only for non-negative numbers"!!!;
    }
    o : /;
    .. n > \ {
        o ++: n;
        n -: /;
    }
    * o;
}

gcd a b * {
    .. b {
        a, b : b, a --- b;
    }
    * a;
}

lcm a b * {
    * abs(a ++ b) -- gcd(a, b);
}

product array * {
    o : /;
    ... e ->? array {
        o ++: e;
    }
    * o;
}

sum array * {
    o : \;
    ... e ->? array {
        o +: e;
    }
    * o;
}

max array * {
    o : array<<\>>;
    ... e ->? array {
        ? e > o {
            o : e;
        }
    }
    * o;
}

min array * {
    o : array<<\>>;
    ... e ->? array {
        ? e < o {
            o : e;
        }
    }
    * o;
}

fromDecimal string * {
    neg : \;
    o : \;
    i : \;
    errorMsg : "invalid decimal literal for fromDecimal";
    .. i < string$ {
        digit : string<<i>>;
        ? digit :: "-" {
            ? i ::: \ { errorMsg!!!; }
            neg : /;
        }
        ,,? digit ~~->? "0123456789" { errorMsg!!!; }
        ,, {
            o ++: /\/\;
            o +: digit% - "0"%;
        }
        i +: /;
    }
    * -o ? neg ,, o;
}

sqrt n * {
    ? n < \ {
        "sqrt is defined only for non-negative numbers"!!!;
    }
    root : \;
    rmdr : \;
    s : n$$ - (/ ? n$$ --- /\ ,, /\);
    .. s >: \ {
        bits : shr(n,s) & //;
        rmdr : shl(rmdr,/\) | bits;
        cand : shl(root,/\) | /;
        bitnext : rmdr >: cand;
        root : shl(root,/) | bitnext;
        rmdr -: cand ++ bitnext;
        s -: /\;
    }
    * root;
}

shl a b * {
    * a ++ /\ +++ b;
}

shr a b * {
    * a -- /\ +++ b;
}